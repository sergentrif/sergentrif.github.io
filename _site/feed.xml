<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-09T15:51:37+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Adrien Blandin, CTO pour start-ups early stage</title><subtitle>Après avoir développé une équipe technique de 3 à 30 personnes jusqu&apos;à l&apos;introduction en bourse réussie de l&apos;entreprise, j&apos;ai décidé de mettre mes compétences au service de nouveaux projets.</subtitle><entry><title type="html">Pourquoi réduire la charge mentale des développeurs à travers la Developer Experience ?</title><link href="http://localhost:4000/articles/pourquoi-reduire-la-charge-mentale-des-developpeurs-a-travers-la-developer-experience" rel="alternate" type="text/html" title="Pourquoi réduire la charge mentale des développeurs à travers la Developer Experience ?" /><published>2024-04-03T00:00:00+02:00</published><updated>2024-04-03T00:00:00+02:00</updated><id>http://localhost:4000/articles/pourquoi-reduire-la-charge-mentale-des-developpeurs-a-travers-la-developer-experience</id><content type="html" xml:base="http://localhost:4000/articles/pourquoi-reduire-la-charge-mentale-des-developpeurs-a-travers-la-developer-experience"><![CDATA[<p>J’ai récemment abordé la diversité des tâches que doivent traiter les développeurs au travers d’un article nommé <a href="/articles/etre-developpeur-c-est-bien-plus-que-developper">Être développeur, c’est bien plus que développer</a>. Il est important d’avoir conscience de cette diversité de tâches, car elle est génératrice de temps perdu. Et perdre du temps, c’est quelque chose que l’on veut éviter à tout prix.</p>

<p>Ce que l’on aimerai, c’est que les développeurs se concentrent sur le développement de fonctionnalités. C’est cette tâche qui est directement génératrice de valeur pour l’entreprise.</p>

<p>En plus d’être chronophages, nombreuses de ces tâches sont désagréables pour les développeurs. Ils ne prennent aucun plaisir à les réaliser !</p>

<p>La question la plus importante à laquelle nous allons essayer de répondre est donc : <strong>pourquoi les développeurs perdent-ils du temps avec la multiplicité des tâches ?</strong> Comprendre cela est crucial. Le temps, c’est de l’argent. Et une entreprise doit être rentable.</p>

<p>Cela peut paraitre fou mais 100 tâches d’une heure prendront plus de temps à réaliser qu’une seule tâche de cent heures. La multiplicité des tâches induit un effet secondaire. Plus il y a de tâches à réaliser, plus il y a de temps passé à changer de tâche.</p>

<p>C’est ce que l’on appelle le <em>context switching</em>.</p>

<p>Pour chaque tâche que l’on arrête, il y a un temps de mise en pause qui est fixe. Pour chaque tâche que l’on démarre, il y a un temps de préparation qui est fixe.</p>

<p>C’est comme lorsque devez choisir une file d’attente à la caisse du supermarché. Le plus important n’est pas tant la quantité d’articles en attente à scanner. Le plus important, c’est surtout le nombre de clients qui attendent. Pourquoi ? Car l’hôtesse de caisse doit réaliser, pour chaque client, un nombre identique de tâches dont la durée est toujours la même : dire bonjour, annoncer le montant à payer, demander le mode de règlement, attendre le règlement, [rendre la monnaie], donner le ticket de caisse, dire au-revoir…</p>

<p>Pour un développeur, c’est la même chose : lire les spécifications demandées, créer une nouvelle branche git, remettre à 0 son jeu de données de tests, sauvegarder son travail git, mettre en ligne sa fonctionnalité…</p>

<p>Ces temps fixes peuvent être de l’ordre de plusieurs minutes à chaque fois. Et plus un développeur change de tâches, plus ces temps vont s’additionner. À la fin de la journée cela peut représenter plusieurs dizaines de minutes.</p>

<p>Sur l’ensemble de votre équipe, cela représente des heures de perdues chaque jour.</p>

<p>Mais il y a encore plus chronophage. Lorsqu’il change de tâche, le développeur (comme tout le monde) perds soudainement son état de concentration. Ce qui peut sembler anodin ne l’est pas. <a href="https://ics.uci.edu/~gmark/CHI2005.pdf" target="_blank">Cette étude</a> prouve qu’il faut 20 minutes après un changement de tâche, pour retrouver sa pleine concentration. 20 minutes durant lesquelles l’efficacité n’est plus à son apogée.</p>

<p>Développer est un métier de concentration. Les développeurs cherchent à atteindre l’<em><a href="https://fr.wikipedia.org/wiki/Flow_(psychologie)" target="_blank">état de flow</a></em>. Un état où le temps ralenti et seule la tâche à accomplir existe. Pourtant, chacune des tâches annexes, chacune des interruptions vont interrompre cet état.</p>

<p>L’ensemble de ces tâches que l‘on attends des développeurs ont donc un coût. Elles les forcent à se rappeler de tout ce qu’ils doivent faire. Puis, de changer régulièrement d’activité. Perdant de fait, temps et concentration. C’est ce que j’appelle, leur charge mentale.</p>

<p>En tant que managers, nous avons une responsabilité. Celle de tout faire pour réduire cette charge mentale. Nous devons réduire le nombre de choses auxquelles ils doivent penser chaque jour. Ils doivent se concentrer sur ce qui importe le plus : créer de la valeur business à travers le développement.</p>

<p><em>Attention, souhaiter que les développeurs se concentrent sur le développement ne signifie pas développer tout et n’importe quoi, à n’importe quel prix. L’idée est de leur faire gagner du temps et de l’énergie pour des fonctionnalités qui ont un impact positif sur le business.</em></p>

<p>C’est dans cette quête de réduction de la charge mentale, que réside à mes yeux le concept et l’intérêt de la <em>Developer Experience.</em> Et ce, à travers deux questions fondamentales :</p>

<ol>
  <li>Quelles sont les tâches sans valeur ajoutée, qui font perdre du temps aux développeurs ?</li>
  <li>Comment pouvons-nous faire pour qu’ils perdent moins de temps sur ces tâches ?</li>
</ol>

<p>David Heinemeier Hansson, le fondateur de Basecamp, a écrit <a href="https://world.hey.com/dhh/the-musk-algorithm-977bf312" target="_blank">The Musk Algorithm</a>, un article qui tente de décrypter la méthode Elon Musk. Loin de me positionner sur ces deux personnages controversés, la méthode proposée me semble hyper-pertinente.</p>

<p>Celle-ci repose sur le fait de supprimer tout ce qui est inutile au quotidien. Puis, de simplifier ce qu’il reste et qui est donc utile. N’hésitez pas à challenger régulièrement l’ensemble de votre organisation, vos processus ou vos rituels. Le moindre ajout, la moindre suppression, peut remettre tout le reste en question. L’objectif est de <strong>toujours</strong> avoir le <strong>minimum nécessaire</strong> pour répondre à vos enjeux du moment.</p>

<p>C’est l’erreur que l’on voit le plus lorsqu’une entreprise veut devenir “agile” du jour au lendemain. Elle prends l’ensemble des rituels recommandés par un framework et les impose tous immédiatement. Hors, chaque rituel répond à une problématique précise. Si vous n’avez pas la problématique, épargnez-vous le rituel ! Ce dernier ne fera qu’alourdir votre quotidien.</p>

<p>De même, il faut être pragmatique. Nous avons vu que chaque processus, chaque rituel, a un coût (temps, charge mentale…). Si le gain obtenu grâce au processus est supérieur au coût du problème initial, alors ce processus mérite d’être conservé. Mais si le gain n’est pas là, inutile d’en payer le coût.</p>

<p>Dernièrement, Google a mené une étude qui s’appelle <a href="https://www.computer.org/csdl/magazine/so/2023/04/10176199/1OAJyfknInm" target="_blank">Build Latency, Predictability, and Developer Productivity</a>. Celle-ci démontre que le temps anticipé pour la réalisation d’une tâche automatique, influence les développeurs dans le choix de ce qu’ils vont faire en attendant que cette tâche se termine.</p>

<p>Prenons l’exemple d’un développeur qui doit attendre que des tests automatisés se terminent pour mettre en ligne sa fonctionnalité. Il ne fera pas la même chose si ces tests s’exécutent en une ou vingt minutes. Si les tests mettent une minute à s’exécuter, il y a fort à parier que le développeur se contentera d’attendre. Si les tests mettent 20 minutes à s’exécuter, le développeur cherchera autre chose à faire en attendant.</p>

<p>Nous pourrions penser que c’est une bonne chose. Que chaque minute de son temps est utilisée à bon escient. Or, c’est justement en changeant de tâche que se produit le phénomène de <em>context switching</em>. C’est à ce moment-là que le développeur commence à perdre temps et concentration. Une fois plongé pleinement dans sa nouvelle tâche, il risque d’oublier qu’il attendait la fin de la première. Il le remarquera plus tard, mettant en ligne sa fonctionnalité avec du retard. Tout en ayant subi 2 changements de tâche.</p>

<p>C’est là ou la phase d’accélération du Musk Algorithm prends tout son sens. En accélérant chaque étape d’un processus, nous réduisons le temps total de son ensemble. Ce faisant, nous décourageons le <em>context switching</em>, ce qui est bénéfique pour l’efficacité de l’équipe.</p>

<p>Des fois, attendre est la meilleure des chose à faire.</p>

<p>Il est légitime de vouloir rendre certaines tâches obligatoires dans le quotidien de votre équipe. Que ce soit des tests à réaliser ou de la Code Review à faire, toutes ces tâches ont leur intérêt et leurs inconvénients. Si elles sont pertinentes pour vous, si vous en acceptez le coût pour bénéficier de leur gain, alors, une seule chose est importante. Supprimer la charge mentale associée à ces tâches.</p>

<p>Pour faire simple, vous devez les automatiser pour que plus personne n’ait à y penser. Puis, vous devez les accélérez pour que les développeurs attendent leur déroulement, sans changer de sujet.</p>

<p>Investir dans la <em>Developer Experience</em>, c’est investir dans l’efficacité de votre équipe technique. En plus de perdre moins de temps, vos développeurs travaillent dans de bonnes conditions. Investir dans le moral de vos collaborateurs, c’est réduire votre taux de turnover.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[J’ai récemment abordé la diversité des tâches que doivent traiter les développeurs au travers d’un article nommé Être développeur, c’est bien plus que développer. Il est important d’avoir conscience de cette diversité de tâches, car elle est génératrice de temps perdu. Et perdre du temps, c’est quelque chose que l’on veut éviter à tout prix.]]></summary></entry><entry><title type="html">Être développeur, c’est bien plus que développer</title><link href="http://localhost:4000/articles/etre-developpeur-c-est-bien-plus-que-developper" rel="alternate" type="text/html" title="Être développeur, c’est bien plus que développer" /><published>2024-03-14T00:00:00+01:00</published><updated>2024-03-14T00:00:00+01:00</updated><id>http://localhost:4000/articles/etre-developpeur-c-est-bien-plus-que-developper</id><content type="html" xml:base="http://localhost:4000/articles/etre-developpeur-c-est-bien-plus-que-developper"><![CDATA[<p>Vous côtoyez des développeurs dans le cadre de votre travail ? Alors, il y a de fortes chances que vous n’ayez aucune connaissance de ce qu’ils font au quotidien. Beaucoup pensent que développer est un métier facile. Après tout, il suffit d’écrire du code puis de le mettre en production en évitant les bugs.</p>

<p>Si vous êtes dans cette situation, ce n’est pas grave. Vous n’êtes pas le seul. Être incompris est le fardeau des métiers techniques. Et en même temps, c’est normal. Ces métiers nécessitent des compétences qui ne s’acquièrent qu’avec une formation spécifique.</p>

<p>C’est pourquoi, nous allons découvrir ensemble les tâches qui occupent le quotidien des développeurs. Celles dont ils doivent s’acquitter pour réussir les projets qui leur sont demandés. Vous comprendrez pourquoi il est difficile d’estimer le temps d’un projet. Et donc, pourquoi les délais sont souvent plus longs que prévus.</p>

<p>J’ai divisé l’ensemble des ces tâches en six catégories distinctes.</p>

<h2 id="les-pré-requis-du-développement">Les pré-requis du développement</h2>

<p>Ces tâches sont un fil rouge qui suit les développeurs tout au long de leur carrière. Bien sûr, elles peuvent être ignorées. Mais cela serait au détriment de la réputation (satisfaction, bad buzz) et des finances (amendes) de l’entreprise.</p>

<ul>
  <li><strong>Ne pas créer de failles de sécurité :</strong> chaque développement induit un risque de sécurité en augmentant la surface d’exposition. Le développeur doit veiller à ce que les données confidentielles des utilisateurs ne soient pas exploitables par n’importe qui. Par ailleurs, des attaquants ne doivent pas pouvoir infiltrer les réseaux et les machines de l’entreprise.</li>
  <li><strong>Respect les contraintes imposées par la RGPD :</strong> personne n’aime ça. Mais c’est une obligation légale qui va dans le sens de l’utilisateur. Le développeur doit respecter les règles en vigueur, à chaque nouvelle fonctionnalité.</li>
  <li><strong>Maintenir un bon niveau de performances applicatives :</strong> il est très facile de dégrader une application. Une petite fonctionnalité peut avoir de gros impacts. Les choix techniques diffèrent en fonction du nombre d’utilisateurs et de fonctionnalités du projet. C’est pourquoi, les développeurs doivent y penser en permanence. Ils devront faire évoluer les technologies plusieurs fois durant la vie de l’entreprise.</li>
  <li><strong>Maintenir un bon niveau de disponibilité applicative :</strong> il est très facile de rendre indisponible une application. Les développeurs doivent travailler à la sécurité du projet et ses performances. Ils doivent aussi mettre en place des mécanismes pour garantir l’accès à l’application. Certaines entreprises ont des objectifs forts à ce sujet. Votre prestataire de paiements ne doit pas être indisponible, ne serait-ce que quelques heures.</li>
  <li><strong>Maintenir un code lisible :</strong> écrire du code, c’est raconter une histoire. Il y a une infinité de façons de l’écrire, toutes différentes. Sauf qu’ici, le livre se rédige à plusieurs. Cela veut dire que ce qu’un développeur écrit, doit être compris par les autres. Et ce, même si le développeur en question a quitté l’entreprise depuis des années. Si plus personne ne comprends comment a été conçu votre projet, alors ce dernier ne pourra plus évoluer.</li>
  <li><strong>[Mettre à jour les données en temps réel] :</strong> plus optionnel que les autres, ce pré-requis s’applique à certaines entreprises ou certaines fonctionnalités précises. Mettre à jour des données en temps réel pour les utilisateurs n’est pas toujours simple. Si c’est un besoin fort, c’est une contrainte supplémentaire à intégrer au développement.</li>
</ul>

<h2 id="le-processus-de-développement">Le processus de développement</h2>

<p>Ici, aucune obligation de réaliser l’ensemble de ces tâches. Selon l’entreprise, ses pratiques et sa culture, certaines pourraient même ne pas exister. Dans certains cas, les tâches peuvent être assignées à des personnes différentes. Selon le niveau d’expertise et d’expérience, toutes n’auront pas le même rôle. En pratique, les développeurs se retrouvent souvent à en faire la majeure partie.</p>

<ul>
  <li><strong>Collaborer avec l’équipe produit :</strong> lorsque l’entreprise dispose d’une culture produit forte, les développeurs consacrent du temps à penser les fonctionnalités avec les designers. Ils les aident à valider les faisabilités techniques, modifiant les maquettes le cas échéant.</li>
  <li><strong>Concevoir techniquement les développements :</strong> on ne monte pas un meuble sans regarder la notice. Pour un développeur, c’est la même chose. Il ne devrait pas développer sans savoir ce qu’il doit faire au préalable. À la seule différence, qu’il est lui-même en charge de rédiger la notice.</li>
  <li><strong>Prendre connaissances des tâches attendues :</strong> dans certains cas, ce n’est pas le développeur en charge du développement qui a rédigé les spécifications techniques. La première étape de son travail sera donc de comprendre ce qui est attendu, donc ce qu’il doit faire.</li>
  <li><strong>Estimer le temps de travail nécessaire :</strong> toutes les entreprises et tous les projets ne requièrent pas d’estimation. Cependant, cela reste une pratique très fréquente. L’équipe qui prépare son travail à venir est souvent en charge de l’estimer temporellement. Cela permet de donner de la visibilité au reste de l’entreprise.</li>
  <li><strong>Développer les fonctionnalités :</strong> c’est le coeur du métier de développeur. C’est là qu’il transforme des idées et des concepts, en lignes de code tangibles qui leur donneront vie.</li>
  <li><strong>Tester son travail :</strong> certaines entreprises ont des équipes dédiées d’<a href="https://fr.wikipedia.org/wiki/Assurance_qualit%C3%A9" target="_blank">Assurance Qualité</a> pour gérer cette étape. Pour les autres, il est attendu que le développeur procède à une batterie de tests. Il doit s’assurer que son travail fonctionne correctement, sans (trop) de bugs. On trouve des tests <em>manuels</em> à réaliser, mais aussi des tests <em>automatiques</em> à rédiger (tests unitaires, tests fonctionnels, tests end to end, monkey testing…)</li>
  <li><strong>Corriger son code :</strong> les bonnes pratiques attendent des développeurs qu’ils relisent et approuvent le code écrit par leurs collègues. Cela implique que souvent, le code n’est pas approuvé dès la première lecture. L’auteur d’une fonctionnalité devra donc ré-écrire certaines parties de son code pour valider l’étape de relecture.</li>
  <li><strong>Corriger les conflits :</strong> lorsque de nombreux développeurs travaillent sur une base de code partagée, plusieurs d’entre eux modifient souvent la même fonctionnalité au même moment. Cela résulte en des conflits que les développeurs devront résoudre.</li>
  <li><strong>Mettre en production sa fonctionnalité :</strong> la finalité d’un développement est sa mise en ligne. Cette étape peut être très simple en fonction du processus de déploiement ainsi que de la nature de la fonctionnalité. Un changement de wording en <a href="https://fr.wikipedia.org/wiki/D%C3%A9ploiement_continu" target="_blank">déploiement continu</a> sera simple et rapide. Une migration de base de données en déploiement manuel le sera beaucoup moins.</li>
  <li><strong>Rédiger la documentation :</strong> pour simplifier le travail des autres développeurs, il est recommandé de documenter le code qui a été écrit. Cela les aidera à utiliser ou faire évoluer la fonctionnalité.</li>
</ul>

<h2 id="le-service-après-vente">Le Service Après-Vente</h2>

<p>Le travail ne se termine pas lorsqu’une fonctionnalité est mise en production. Il débute seulement. Dès lors que quelque chose existe en production, il faut le maintenir, le corriger et le faire évoluer.</p>

<ul>
  <li><strong>Assurer le support technique :</strong> une fois les fonctionnalités mises en production, ces dernières doivent fonctionner correctement. Elles ne doivent pas avoir de bugs ou en créer dans d’autres fonctionnalités. Les développeurs doivent consacrer du temps à la surveillance automatisée des projets, que l’on appelle le <a href="https://fr.wikipedia.org/wiki/Surveillance_(informatique)" target="_blank">monitoring</a>. Ils doivent aussi participer au support technique humain des utilisateurs.</li>
  <li><strong>Annuler les mises en production :</strong> lorsqu’un bug est détecté, une mesure de précaution consiste en un retour en arrière de l’application. Au moins, le temps de corriger le problème. Selon les outils à disposition du développeur, cette étape peut prendre du temps.</li>
  <li><strong>Corriger les bugs :</strong> ils font partie intégrante du quotidien. Il est impossible de développer un projet sans en créer. Il faut par contre les résoudre. Corriger un bug, c’est d’abord le comprendre. Le développeur doit se mettre dans les mêmes conditions d’apparition pour le reproduire. Une fois cette tâche réussie, il pourra identifier ce qui ne marche pas et développer un correctif.</li>
</ul>

<h2 id="les-imprévus-du-quotidien">Les imprévus du quotidien</h2>

<p>Nous aimerions que tout se déroule toujours comme nous le souhaitons. Mais c’est rarement le cas. Les journées sont rythmées par de nombreux imprévus qui tombent toujours au moment le moins opportun.</p>

<ul>
  <li><strong>Gérer les incidents techniques :</strong> un datacenter qui prends feu, un prestataire qui tombe, une attaque de hackers… De nombreux éléments peuvent mettre à mal vos applications. Et ce, sans que votre équipe n’en soit responsable. Nous pouvons anticiper au mieux et travailler à la résilience, mais le risque 0 n’existera jamais. Par contre, les développeurs seront toujours mobilisés pour trouver des solutions dans le feu de l’action.</li>
  <li><strong>Répondre aux questions du <em>métier</em> :</strong> même avec la meilleure documentation, il y aura toujours quelqu’un pour solliciter un développeur et lui demander de lui expliquer le fonctionnement d’une fonctionnalité.</li>
  <li><strong>Développer des fonctionnalités au dernier-moment :</strong> un code promotionnel unique à créer pour signer un deal, une demande <em>importante</em> du CEO à faire de toute urgence, rembourser automatiquement 1000 clients pour faire gagner du temps au service comptable… De nombreuses demandes arrivent sur le bureau des développeurs sans passer par le processus de priorisation classique.</li>
</ul>

<h2 id="aider-les-autres-développeurs">Aider les autres développeurs</h2>

<p>Ils ont beau être seuls devant leur ordinateur, développer est un travail collectif. Certains des meilleurs développeurs ne consacrent d’ailleurs aucun temps à développer. Pourtant, s’ils n’étaient pas là, la productivité de toute l’équipe en souffrirait.</p>

<ul>
  <li><strong>Approuver les conceptions techniques :</strong> pour garantir la cohérence d’un système dans son ensemble, il est important que tous les développeurs respectent les mêmes façons de faire. Il est recommandé que chaque conception technique réalisée par un développeur, soit relue et validée par un autre.</li>
  <li><strong>Approuver les développements réalisés :</strong> nous l’avons vu, il y a souvent un processus de <a href="https://fr.wikipedia.org/wiki/Revue_de_code" target="_blank">Code Review</a> en place. Cela garantit une uniformisation des développements, en réduisant le risque de bugs grâce à un regard extérieur. Chaque développeur doit donc relire le travail des autres.</li>
  <li><strong>Accompagner les autres développeurs :</strong> de temps en temps, les développeurs n’arrivent pas à résoudre seuls, les problèmes auxquels ils font face. Ils ont besoin d’homologues, pour les écouter et les aider</li>
  <li><strong>Former les autres développeurs :</strong> une équipe est aussi forte que son élément le plus faible. C’est pourquoi, il est important de faire progresser tout le monde. Les développeurs expérimentés doivent transmettre leur savoir aux autres. Pour cela, de nombreux formats existent tels que des ateliers collectifs ou individuels.</li>
</ul>

<h2 id="se-former-soi-même">Se former soi-même</h2>

<p>L’informatique est un univers en perpétuelle évolution. Un développeur qui ne se forme pas est un développeur qui sera vite obsolète. Une carrière professionnelle dure en moyenne 40 ans. Les développeurs doivent rester à jour durant toute cette période.</p>

<ul>
  <li><strong>Faire de la <a href="https://fr.wikipedia.org/wiki/Veille_technologique" target="_blank">veille technique</a> :</strong> il est important que les développeurs soient au courant des nouveautés techniques et des évolutions des bonnes pratiques. C’est ce qui permettra à votre projet d’évoluer et de continuer à rester compétitif. Pour réussir cela, ils doivent investir du temps dans l’auto-formation.</li>
  <li><strong>Développer des <a href="https://fr.wikipedia.org/wiki/Preuve_de_concept" target="_blank">Proof Of Concept</a> :</strong> lorsqu’une technologie semble avoir du potentiel pour votre entreprise, il est important de laisser certaines personnes le vérifier. Cela permet de ne pas s’engager tête baissée dans une évolution qui ne serait pas viable.</li>
</ul>

<p>Le développement n’est finalement qu’une petite partie de l’activité des développeurs. Toutes les autres tâches sont soi à son service, soit des obstacles à son bon déroulement.</p>

<p>C’est souvent cela qui est vecteur d’incompréhension entre le <em>métier</em> et la technique. Lorsque nous souhaitons le développement d’une fonctionnalité, nous ne nous rendons pas compte du nombre de tâches annexes à celle-ci. Les développeurs aussi font souvent cette erreur. Quand ils estiment le temps nécessaire à un projet, ils n’intègrent en général que le processus de développement en lui-même.</p>

<p>Et c’est d’ailleurs sur le développement que l’on aimerait qu’ils se concentrent. C’est cette tâche qui est directement génératrice de valeur pour le projet ou l’entreprise.</p>

<p>Pour maximiser le temps consacré à générer de la valeur, il est important de trouver comment réduire le temps consacré aux tâches annexes. Si vous souhaitez savoir comment faire, rendez-vous dans mon article suivant : <a href="/articles/pourquoi-reduire-la-charge-mentale-des-developpeurs-a-travers-la-developer-experience">pourquoi réduire la charge mentale des développeurs à travers la Developer Experience ?</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Vous côtoyez des développeurs dans le cadre de votre travail ? Alors, il y a de fortes chances que vous n’ayez aucune connaissance de ce qu’ils font au quotidien. Beaucoup pensent que développer est un métier facile. Après tout, il suffit d’écrire du code puis de le mettre en production en évitant les bugs.]]></summary></entry><entry><title type="html">Réussir ses recrutements en impliquant son équipe</title><link href="http://localhost:4000/articles/reussir-ses-recrutements-en-impliquant-son-equipe" rel="alternate" type="text/html" title="Réussir ses recrutements en impliquant son équipe" /><published>2024-02-15T00:00:00+01:00</published><updated>2024-02-15T00:00:00+01:00</updated><id>http://localhost:4000/articles/reussir-ses-recrutements-en-impliquant-son-equipe</id><content type="html" xml:base="http://localhost:4000/articles/reussir-ses-recrutements-en-impliquant-son-equipe"><![CDATA[<p>Au cours des dernières années, j’ai conduit des centaines d’entretiens de recrutement. Cela n’a jamais été un exercice que j’apprécie particulièrement. Pourtant, je suis persuadé que c’est la tâche la plus importante à traiter. Et ce, même si l’on pense ne pas en avoir le temps.</p>

<p>Recruter les bonnes personnes peut conduire une entreprise vers le succès. L’inverse est tout aussi vrai. Je m’étais donc fixé pour objectif de construire la meilleure équipe technique possible.</p>

<p>Le marché du recrutement de développeurs est complexe. La demande est supérieure à l’offre. Beaucoup d’entreprises se battent pour trop peu de candidats. Et si comme moi vous voulez les meilleurs, alors la concurrence est rude sur leurs profils. Les entreprises rivalisent pour se démarquer : salaires élevés, avantages en tous genres… J’ai vu des profils juniors être embauchés en sortie d’école entre 55K€ et 60K€ brut annuel.</p>

<p>Impossible de s’aligner. Toutes les entreprises n’ont pas des moyens aussi importants. Toutes ne peuvent pas se permettre des salaires plus élevés que la norme du marché.</p>

<p>Alors, comment attirer les meilleurs profils lorsque l’on ne peut pas s’aligner sur les conditions matérielles ?</p>

<p>La première chose à faire est de mettre en place les évidences : une mutuelle décente, une contribution aux transports et aux repas, une politique de télétravail flexible… Il faut montrer que l’entreprise n’est pas juste là pour tirer profit des employés. Elle cherche aussi leur rendre la pareille.</p>

<p>Mais ensuite ? Je suis convaincu qu’il faut remettre l’humain au coeur de tout.</p>

<p>Nous avons repensé notre processus de recrutement à travers deux convictions clés. Le parcours doit être exigeant et l’équipe en place doit y participer à 100%. Recruter n’est pas la corvée des RH. Ils doivent bien sûr intervenir, mais surtout en début et fin de parcours.</p>

<p>En début de parcours, pour pré-filtrer les candidats qui seront reçus par l’équipe de développement. Ces derniers ont un métier de concentration et chaque interruption est préjudiciable. Il faut s’assurer que les profils qu’ils rencontreront sont qualifiés. Ils doivent avoir des chances concrètes de réussir le parcours de recrutement.</p>

<p>En fin de parcours, pour s’occuper des démarches administratives et finaliser l’embauche.</p>

<p>Et entre ces deux entretiens RH, nous avons mis en place 3 entretiens techniques.</p>

<h2 id="vendre-un-projet">Vendre un projet</h2>

<p>Le premier entretien doit être conduit par le CTO ou un responsable technique. C’est un entretien commercial. Il faut donner envie aux candidats de rejoindre l’entreprise. Ce n’est pas la stack technique qui les fait rêver. Ce qu’il faut mettre en avant, c’est une vision, une mission et une équipe. Un projet en somme.</p>

<p>Bien sûr, les choix de technologies et de méthodes de développement vont aider. Mais finalement, c’est la cerise sur le gâteau. Nombreux sont les candidats prêts à rejoindre un projet incroyable avec des bases bancales. Peu ont envie d’un projet inintéressant très bien exécuté.</p>

<p>Cet entretien a pour vocation de convaincre le candidat à rejoindre l’aventure. Cela aide aussi l’entreprise à savoir si elle désire recruter le candidat.</p>

<p>Il faut toujours savoir arrêter un processus de recrutement le plus tôt possible. Le temps de chacun est précieux. Il est inutile d’infliger à un candidat des heures d’échanges si l’on sait que ça n’aboutira pas. J’ai parfois mis un terme à des recrutements durant l’entretien en lui-même. Cela peut sembler brutal. Toutefois, laisser quelqu’un tenter d’aller au bout de quelque chose qu’il ne comprends pas, n’est pas un cadeau à faire.</p>

<p>Pour limiter les pertes de temps, j’ai pour habitude de commencer par les questions les plus litigieuses. Les modalités de télétravail en font souvent partie.</p>

<h2 id="valider-les-compétences-techniques">Valider les compétences techniques</h2>

<p>Le deuxième entretien est un exercice technique. En général, j’ai pour habitude de faire des exercices de conception ou de modélisation (base de données, API, UML). Maitriser des technologies ne m’intéresse pas, elles peuvent s’apprendre rapidement. Synthétiser un problème complexe en architecture simple et une compétence primordiale, plus difficile à assimiler.</p>

<p>Cet entretien dure en général 2 heures dont une heure d’exercice et une heure d’échange. Il me semble inutile et irrespectueux d’en demander plus à un postulant. Son temps aussi est précieux.</p>

<p>Ici, la conduite de cet entretien est toute indiquée pour un responsable technique et un membre de son équipe. Cet entretien est axé sur les compétences techniques. Il est essentiel que les personnes qui interviennent soient expertes dans ce domaine. Si l’on cherche à recruter un développeur backend, l’entretien doit être conduit par un lead backend et un autre développeur backend.</p>

<p>J’aime le format de conception car il pousse à l’échange. Comprendre le pourquoi des choix et les challenger avec de nouvelles problématiques. Voir le candidat appréhender les impacts des changements, ou non. Je suis vieux jeu à ce sujet mais des feuilles de papier et un tableau blanc sont les seuls éléments nécessaires.</p>

<h2 id="valider-le-fit-humain">Valider le fit humain</h2>

<p>Si l’entretien technique s’est bien passé, alors démarre le dernier entretien. Son objectif est de faire rencontrer au candidat, des personnes avec qui il travaillera. 3 personnes me semble être le bon chiffre. En mettre plus s’apparenterait à de l’intimidation.</p>

<p>Si notre candidat est un profil backend, inutile de mettre des membres de l’équipe backend. Ces compétences auront déjà été validées lors de l’entretien précédent. Nous allons plutôt chercher une diversité de profils complémentaires. Ici, un développeur frontend, un data analyst et un product manager seraient adéquats. L’idée est de cercler au mieux l’ensemble des interactions que le candidat doit être en mesure d’avoir par la suite.</p>

<p>Il est toujours bien d’avoir des profils seniors et chevronnés dans cet entretien. Mais il faut aussi faire participer des profils plus juniors. Ils sont plus à même de détecter les qualités de leadership et de mentorat nécessaires à un bon équilibre dans l’équipe.</p>

<p>Cet entretien peut sembler informel et il doit l’être dans la forme. Cela peut être une visio d’une heure ou bien un déjeuner au restaurant. Néanmoins, il est aussi important que les autres et l’équipe doit rester intransigeante. C’est peut-être la dernière étape mais elle peut être échouée.</p>

<p>Au niveau du contenu, chacun posera des questions quant à son domaine d’expertise. Il faut réussir à se projeter sur ce à quoi ressembleront les échanges futurs. Attention à ne pas faire doublon avec les sujets abordés dans les entretiens préalables.</p>

<h2 id="oui-ou-non-il-faut-faire-un-choix">Oui ou non, il faut faire un choix</h2>

<p>À ce stade, le candidat a donc vu 6 personnes sans compter les RH. Il est temps de décider s’il pourra rejoindre l’équipe.</p>

<p>Le format le plus intéressant est de faire voter à bulletin secret, chaque personne qui a participé au processus de recrutement. Le vote doit avoir lieu immédiatement avant que les uns et les autres aient eu le temps de s’échanger leurs avis. Les opinions doivent rester personnelles. Les votes doivent être binaires. Oui ou non. Il est interdit de mettre un “… mais …”.</p>

<p>Une fois ces votes en votre possession, il est l’heure d’animer le débat. Chacun doit prendre la parole pour annoncer son vote et expliquer sa décision. Ici, l’échange et le désaccord sont fortement encouragés. C’est le dernier moment pour relier les points et mieux cerner la personnalité du postulant.</p>

<p>Lorsque chacun a pu s’exprimer, vous pouvez refaire un vote pour voir si certains avis ont évolué suite au débat.</p>

<p>En cas d’accord total, il n’y a pas de raison de tergiverser. Vous pouvez faire une proposition à votre candidat immédiatement.</p>

<p>Avoir moins 30% de désaccord est acceptable. Vous pouvez faire votre proposition sans crainte. Vous pouvez aussi ne pas la faire. C’est au responsable de prendre cette décision et de trancher selon ce qu’il a entendu.</p>

<p>Au dessus de 30% de désaccord, il y a un doute. Et lorsqu’il y a un doute il n’y en a pas. Ne faites pas de proposition.</p>

<p>En utilisant cette méthode de recrutement, j’ai obtenu 100% d’acceptation à mes propositions. Et ce, même lorsque le salaire proposé était inférieur à ce que la concurrence offrait au candidat.</p>

<p>Ce n’est pas parce qu’il y a plusieurs étapes, qu’il faut forcément que ce soit long. Il est tout à fait possible d’enchainer les entretiens si le candidat est disponible. Attention, il est intéressant de laisser 48 heures après chaque entretien pour digérer ce qu’il s’est passé. Cela permet de se forger un avis objectif. Passé ce délai, il faut rapidement donner sa réponse au candidat. Même si on le refuse, c’est une question de respect pour le temps consacré.</p>

<p>Alors pourquoi ça fonctionne ?</p>

<p>Pour votre équipe déjà, c’est valorisant. Les développeurs sont impliqués dans le processus de recrutement. Cela veut dire que leur voix compte et qu’ils participent activement à la prise de décision. C’est responsabilisant et je n’ai jamais vu quelqu’un ne pas assumer cette responsabilité avec sérieux. Ils construisent l’équipe dans laquelle ils vont travailler. L’enjeu est fort.</p>

<p>Ne recruter que les meilleurs implique que les profils déjà en place font eux aussi partie des meilleurs. Mettre un niveau d’exigence élevé est la garantie pour chacun de savoir qu’il est lui-même exceptionnel. Tout comme les personnes à ses côtés.</p>

<p>Pour l’entreprise, on réduit les risques de mauvais recrutements. Avec au moins 6 interlocuteurs, on couvre un spectre d’analyse de compétences et de savoir-être plus large. On utilise l’intelligence collective pour prendre de meilleures décisions.</p>

<p>J’ai raté plusieurs recrutements ces dernières années. À chaque fois que cela est arrivé, c’est parce que j’ai transigé avec mes propres règles. Je n’avais pas assez de candidats alors j’enlevais des critères d’exigence pour augmenter le taux de réussite.</p>

<p>Finalement, pour le candidat il devient difficile de dire non. Il aura participé à plus de 4 entretiens où il aura rencontré presque une dizaine de personnes. Mis bout à bout, ces rencontres auront duré plusieurs heures. Le candidat a investi une énergie non négligeable qui décourage de faire marche arrière.</p>

<p>À travers des échanges informels, il aura fait la connaissance de sa future équipe. C’est comme s’il en faisait déjà partie.</p>

<p>C’est quand même plus sympa que 8 heures de questions / réponses à faire seul chez soi.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Au cours des dernières années, j’ai conduit des centaines d’entretiens de recrutement. Cela n’a jamais été un exercice que j’apprécie particulièrement. Pourtant, je suis persuadé que c’est la tâche la plus importante à traiter. Et ce, même si l’on pense ne pas en avoir le temps.]]></summary></entry><entry><title type="html">Être le leader dont l’équipe a besoin</title><link href="http://localhost:4000/articles/etre-le-leader-dont-l-equipe-a-besoin" rel="alternate" type="text/html" title="Être le leader dont l’équipe a besoin" /><published>2024-02-14T00:00:00+01:00</published><updated>2024-02-14T00:00:00+01:00</updated><id>http://localhost:4000/articles/etre-le-leader-dont-l-equipe-a-besoin</id><content type="html" xml:base="http://localhost:4000/articles/etre-le-leader-dont-l-equipe-a-besoin"><![CDATA[<p>Être à un poste de dirigeant implique directement de savoir décider. Mais indirectement, cela implique d’être un leader et de savoir faire preuve de leadership. Ces deux notions ont des définitions différentes pour chacun. Cependant, nous pouvons dire qu’un leader doit savoir montrer le chemin à suivre. Il doit savoir convaincre son équipe de l’y accompagner.</p>

<p>Cet article est la dernière partie d’une série axée sur les compétences à chercher chez un CTO. Si vous n’avez pas encore lu le quatrième article, je vous encourage à le faire ici : <a href="/articles/etre-cto-ou-l-art-de-representer-plusieurs-parties">être CTO ou l’art de représenter plusieurs parties</a></p>

<p>Cet article est la dernière partie d’une série axée sur les compétences à chercher chez un CTO. Si vous n’avez pas encore lu le quatrième article, je vous encourage à le faire ici : être CTO ou l’art de représenter plusieurs parties</p>

<p>Pour montrer le chemin à suivre, il faut être en première ligne. Il y a une différence entre un chef et un leader. Être l’un n’implique pas être l’autre. Pour être un bon CTO, mieux vaut savoir être les deux.</p>

<p>Être le “chef” est un rapport hiérarchique. C’est donner des ordres et les voir suivis. C’est souvent nécessaire pour que chaque membre d’une équipe respecte un plan et contribue à son succès. Et ce, malgré les différentes opinions personnelles sur ce qu’il faudrait faire ou non.</p>

<p>Mais le leadership ne peut se réduire à cela. Un leader ne se contente pas de donner des ordres de loin. Il ne se met pas à l’abri des éclaboussures. Il est le premier à affronter les obstacles.</p>

<p>Souvent, le CTO ne peut pas aider. Ses compétences peuvent être inutiles à un instant T. Pourtant, il doit toujours être présent et faire de son mieux. Partager le fardeau est la seule. chose qui importe. Ne jamais attendre des autres ce que l’on n’est pas prêt à faire soi même.</p>

<p>C’est le cas lorsque votre entreprise se fait attaquer par des pirates un week-end. De même quand vous avez une mise en production à faire la nuit. Des personnes bien plus compétentes que le CTO seront mobilisées pour traiter ces tâches. Être présent dans les situations difficiles prouve que l’on reconnait l’implication et le travail fourni. Il faut le faire, même si la seule action à notre portée est de détendre l’atmosphère.</p>

<p>Être présent permet de donner son accord pour des décisions prises dans le feu de l’action. C’est là un gage de ré-assurance pour les équipes sur le terrain qui permet de diminuer la pression.</p>

<p>Pour décider d’un chemin à suivre, encore faut-il avoir plusieurs options sur la table. Pour guider, encore faut-il avoir décidé d’une seule de ces options. Pour embrasser son rôle de leader, le CTO doit mobiliser d’autres compétences qui l’aideront à construire une vision pour son entreprise.</p>

<p>S’il dispose d’une forte expertise technique, le CTO est en mesure de construire cette vision seul. C’est probablement ce qu’il fera tant qu’il sera hands-on. Jusqu’à ce que l’équipe devienne trop conséquente et que sa connaissance technique des projets régresse.</p>

<p>Si le CTO n’a pas d’expertise technique ou si l’équipe grandit, il faut que de nouveaux leaders émergent dans l’entreprise. Le CTO doit apprendre à se mettre en retrait pour que la vision technique provienne désormais de son équipe. Il doit prendre un rôle de mentor pour catalyser les envies de chacun qu’il devra ensuite canaliser. Il est nécessaire de créer un climat d’échange pour faire émerger de tous des idées, y compris des plus juniors. Ils ont une énergie débordante, souvent un peu naïve. Mais elle apporte un vent de fraicheur salvateur.</p>

<p>Il est peu probable qu’une équipe de plusieurs individus se mettre d’accord sur la direction à suivre. Et même lorsque cela est le cas, il est possible que cette direction ne soit pas alignée avec la stratégie de l’entreprise. Elle peut être incompatible avec la vision d’autres départements, y compris techniques. Décider d’une architecture event-driven sans que l’équipe infrastructure soit staffée pour, serait une erreur.</p>

<p>C’est là où le CTO intervient à nouveau. Il doit prendre cette matière brute, ces idées mises sur la table pour les transformer en un projet global et cohérent. Ses compétences en communication sont mises à rude épreuve. Il doit être capable de refuser des idées, des projets ou des propositions entières. Il doit s’assurer de la pertinence du résultat final. Ce sont des choix qu’il faudra défendre. Il faudra réussir à embarquer toute l’entreprise pour leur mise en oeuvre et leur succès.</p>

<p>La vision technique doit être pensée en adéquation avec les projets et besoins de l’entreprise.</p>

<p>Construire une vision technique à atteindre est la première étape à accomplir. C’est choisir la destination à atteindre sur une carte routière. Il n’y a pas de bonnes ou de mauvaises destinations. Il y a des destinations différentes, avec chacune leurs avantages et inconvénients.</p>

<p>Mais une fois la destination choisie, il reste le trajet à faire.</p>

<p>Le CTO doit donc s’assurer qu’un plan de mise en oeuvre est conçu. Il devra s’appuyer sur les compétences de son équipe pour le créer. Il faut réduire les risques au maximum pour augmenter les chances de succès dans la réalisation.</p>

<p>Une fois le plan de mise en oeuvre validé, il reste le plus dur. Faire en sorte qu’il soit respecté,  que les différentes étapes planifiées sont bien atteintes les unes après les autres. Tout en sachant s’adapter aux imprévu du quotidien.</p>

<p>Faire des choix et en assumer les responsabilités, qu’elles qu’en soit les conséquences. Décider d’une destination et le chemin à emprunter. Là se trouve l’essence du leadership. Chaque décision a un impact sur le futur de l’entreprise. Monolithe ou micro-services ? Démarrer une refonte ou ne pas le faire ? Recruter un profil ou passer son tour ? Il faut savoir choisir pour avancer.</p>

<p>Beaucoup ont peur de l’échec et évitent donc de prendre des risques. Ils avancent, doucement. C’est incompatible avec un rôle de leader. Un leader fait des erreurs. L’important est simplement de prendre plus souvent de bonnes décisions que de mauvaises.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Être à un poste de dirigeant implique directement de savoir décider. Mais indirectement, cela implique d’être un leader et de savoir faire preuve de leadership. Ces deux notions ont des définitions différentes pour chacun. Cependant, nous pouvons dire qu’un leader doit savoir montrer le chemin à suivre. Il doit savoir convaincre son équipe de l’y accompagner.]]></summary></entry><entry><title type="html">Être CTO ou l’art de représenter plusieurs parties</title><link href="http://localhost:4000/articles/etre-cto-ou-l-art-de-representer-plusieurs-parties" rel="alternate" type="text/html" title="Être CTO ou l’art de représenter plusieurs parties" /><published>2024-02-06T00:00:00+01:00</published><updated>2024-02-06T00:00:00+01:00</updated><id>http://localhost:4000/articles/etre-cto-ou-l-art-de-representer-plusieurs-parties</id><content type="html" xml:base="http://localhost:4000/articles/etre-cto-ou-l-art-de-representer-plusieurs-parties"><![CDATA[<p>En tant qu’intermédiaire, le CTO représente plusieurs interlocuteurs différents. D’abord, il représente l’équipe technique auprès des dirigeants. Ensuite, il représente les dirigeants auprès de l’équipe technique. Enfin, il représente l’entreprise auprès du monde extérieur.</p>

<p>Cet article est la quatrième partie d’une série axée sur les compétences à chercher chez un CTO. Si vous n’avez pas encore lu le troisième article, je vous encourage à le faire ici : <a href="/articles/savoir-communiquer-au-coeur-du-role-de-cto">savoir communiquer, au cœur du rôle de CTO</a></p>

<p>Cette position centrale vient avec son lot de difficultés que beaucoup ont du mal à endosser. Ils finissent par “choisir un camp” entre l’équipe qu’ils managent et la direction. Peu importe le choix qui est fait. Le simple fait de s’être positionné se traduira par une perte de légitimité envers l’autre partie.</p>

<p>Le CTO doit donc apprendre à jongler efficacement. Il doit savoir promouvoir son équipe, sans tomber dans une adoration aveugle. Il doit être objectif sur les forces et faiblesses des individus, pour les challenger et les aider à progresser. Trouver des excuses en cas de problème et se voiler la face ne fera grandir personne. Cela ne servira pas non plus les intérêts de l’entreprise.</p>

<p>Beaucoup de leaders adoptent cette posture de facilité. Ce faisant, ils ne s’élèvent pas au dessus de leur équipe pour la servir comme il le faut. Ils restent bloqués à l’intérieur de celle-ci. Cette approche <em>semble</em> pour beaucoup, plus humaine et plus bienveillante. Toutefois, elle posera des problèmes de responsabilité. Être un bon représentant, être un bon leader, c’est savoir prendre des décisions difficiles. C’est parfois acter qu’un membre de l’équipe n’a plus sa place dans celle-ci. Il est impossible de prendre ce genre de décisions lorsque l’on est à l’intérieur de l’équipe. Il ne faut jamais oublier les conséquences humaines que représentent ces décisions.</p>

<p>S’il faut être capable de toujours dire les choses, cela implique de savoir féliciter et récompenser. Lorsque les choses sont bien faites, il faut le verbaliser. Être juste et dire du positif est la condition requise pour se permettre de dire du négatif. Sinon, les critiques seront systématiquement perçues comme non objectives. Elles seront vues comme un moyen de dénigrer les individus alors qu’il faut les aider à progresser.</p>

<p>Une main de fer dans un gant de velours en somme.</p>

<p>Le CTO doit donc savoir dire les choses à son équipe, qu’elles soient positives ou négatives. Mais il doit être en mesure de faire le même exercice envers les dirigeants de l’entreprise. Sa mission est de mettre la technique au service des intérêts économiques de l’entreprise. Pour réussir cela, il faut parfois contrarier les opinions des uns et des autres.</p>

<p>Certaines décisions difficiles mais nécessaires devront être présentées et défendues auprès des équipes. C’est le cas lorsque l’on abandonne un projet sur lequel certains ont travaillé durant plusieurs semaines. D’autres fois, certaines idées vont venir desservir les intérêts de l’entreprise. Par exemple, lorsque l’on souhaite lancer trop de projets en simultané. Cela aura un impact sur les chances de réussite de chacun de ces projets.</p>

<p>C’est le rôle du CTO que d’anticiper les impacts des demandes des dirigeants et de les prévenir des risques qui y sont liés. Il a un rôle de conseil et doit être capable de dire ce qu’il pense. Même s’il est persuadé que les dirigeants se trompent.</p>

<p>Attention, ces discussions doivent bien sûr avoir lieu en vase clos. À la fin, qu’elle que soit la décision adoptée, le CTO doit être capable de s’y plier et la défendre. Même si elle ne lui plait pas. Il est une voix au sein des dirigeants mais n’est pas la direction à lui seul. Selon son statut (associé, freelance…), son poids dans la décision retenue ne sera pas non plus le même.</p>

<p>En tant que représentant technique, il est nécessaire que le CTO aie cette légitimité auprès de toutes les parties. Il doit savoir de quoi il parle, en le simplifiant lorsqu’il s’adresse à des personnes non techniques. Il doit comprendre les enjeux des échanges de son équipe pour les challenger. Nul besoin d’être le meilleur, seulement le plus polyvalent. Avoir été sur le terrain à une période de sa carrière pour en comprendre les concepts me semble être un pré-requis au rôle.</p>

<p>En tant que leader et représentant, il est important qu’il tire chacun vers le haut et lui donne envie de progresser. Pour cela, il ne doit jamais s’attribuer la moindre réussite. Il doit toujours mettre en avant les personnes qui ont contribué au succès d’un projet.</p>

<p>Le CTO va mettre en place la vision, la stratégie et faire des choix décisifs. Mais c’est rarement lui qui va façonner et donner vie aux projets. C’est l’équipe en charge de la bonne exécution qui devra être félicitée et récompensée pour le travail accompli.</p>

<p>Inversement, les échecs doivent être collectifs. Aucun individu à l’exception du CTO ne doit porter seul, la responsabilité d’une erreur. Lorsqu’un projet échoue, il faut chercher la responsabilité au niveau hiérarchique supérieur de ceux qui ont travaillé. Même dans une organisation où chacun travaille en grande autonomie. Les responsables ont toujours un droit de regard sur ce qui est fait. S’ils l’exercent et que cela échoue, cela devient leur erreur. S’ils ne l’exercent pas et que cela échoue, ils auraient du l’exercer.</p>

<p>En tant que dirigeant, ne recrutez jamais un directeur qui s’attribue à lui seul les réussites de son équipe. En cas de problème, il n’assumera pas ses responsabilités et cherchera un bouc émissaire à qui faire porter le chapeau.</p>

<p>Représenter est un jeu d’équilibre. Il faut sortir des émotions et adopter une posture objective, une posture de neutralité. Envers son équipe mais aussi envers les dirigeants. L’objectif est toujours le même pour le CTO : faire en sorte que son équipe atteigne les objectifs de l’entreprise.</p>

<p>Vous découvrirez la dernière des compétences d’un bon CTO en vous rendant sur l’article suivant : <a href="/articles/etre-le-leader-dont-l-equipe-a-besoin">être le leader dont l’équipe a besoin</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[En tant qu’intermédiaire, le CTO représente plusieurs interlocuteurs différents. D’abord, il représente l’équipe technique auprès des dirigeants. Ensuite, il représente les dirigeants auprès de l’équipe technique. Enfin, il représente l’entreprise auprès du monde extérieur.]]></summary></entry><entry><title type="html">Savoir communiquer, au cœur du rôle de CTO</title><link href="http://localhost:4000/articles/savoir-communiquer-au-coeur-du-role-de-cto" rel="alternate" type="text/html" title="Savoir communiquer, au cœur du rôle de CTO" /><published>2024-01-31T00:00:00+01:00</published><updated>2024-01-31T00:00:00+01:00</updated><id>http://localhost:4000/articles/savoir-communiquer-au-coeur-du-role-de-cto</id><content type="html" xml:base="http://localhost:4000/articles/savoir-communiquer-au-coeur-du-role-de-cto"><![CDATA[<p>Le CTO a une position particulière au sein de l’entreprise. Au yeux des dirigeants, il représente l’équipe technique. Au yeux de l’équipe technique, il représente les dirigeants.</p>

<p>Cet article est la troisième partie d’une série axée sur les compétences à chercher chez un CTO. Si vous n’avez pas encore lu le deuxième article, je vous encourage à le faire ici : <a href="/articles/se-remettre-en-question-le-syndrome-de-l-imposteur-est-un-cadeau">se remettre en question : le syndrome de l’imposteur est un cadeau</a></p>

<p>Au sens de la <a href="https://www.youtube.com/watch?v=BjE_mPoZPSg" target="_blank">first-team</a>, il appartient à l’équipe des directeurs. Pourtant, il se trouve dans une position d’intermédiaire la majeure partie du temps. Il doit représenter les intérêts des uns aux yeux des autres, et vice-versa. Son objectif est d’aligner tout le monde, pour la bonne efficacité de l’entreprise. Pour réussir, il faut faire se comprendre des individus qui ne parlent pas toujours le même langage. Des individus qui affrontent quotidiennement des difficultés bien différentes.</p>

<p>Communiquer en temps qu’intermédiaire c’est jongler entre la “descente” et la “remontée” d’informations. Il faut savoir parler avec pédagogie en vulgarisant le message. Les informations transmises doivent être éligibles, entendues et comprises par leurs destinataires.</p>

<p>La communication est le système sanguin d’une entreprise. Plus l’entreprise est grande, plus le nombre de veines est élevé. La circulation des informations devient complexe. Ces dernières doivent traverser plusieurs couches de management et plusieurs départements. Le tout, sans  être déformées et perdre leur essence.</p>

<p>Dans une “petite” entreprise, la question de la communication se pose peu. Il n’y a pas beaucoup d’employés. Tous se connaissent et travaillent probablement dans le même bureau. Les échanges sont fréquents et souvent informels lors d’activités extra-professionnelles.</p>

<p>Lorsqu’une entreprise croit, le nombre de “groupes” d’employés augmente aussi. Il est impossible de maintenir un contact régulier avec plus d’une vingtaine de personnes.</p>

<p>La problématique majeure de l’équipe de direction tourne désormais autour de la bonne circulation des informations. Avec elle, se poseront les questions de l’organisation appropriée pour réussir, donc des rôles clés nécessaires. Quels sont les outils et les rituels qui permettront de donner accès à ces informations ? Sans noyer chaque individu dans un flot de messages inutiles. Ceux-là, masqueront ce dont on veut qu’il se souvienne.</p>

<p>Souvent, les personnes issues d’un milieu technique s’expriment de manière technique. Cela donne un sentiment d’expertise et de légitimité. C’est oublier le sens même de la communication : transmettre une information. À quoi bon perdre du temps à partager quelque chose qui ne sera ni compris, ni retenu ?</p>

<p>Un bon CTO doit faire comprendre les enjeux techniques de manière simple à un Comité de Direction. Tout comme il doit faire comprendre les enjeux business de manière simple à une équipe de développement.</p>

<p>S’il faut masquer 75% des problèmes mineurs pour se concentrer sur les 25% qui sont importants, c’est ok. S’il faut faire comprendre les enjeux techniques en comparant ce métier à un autre plus compréhensible, très bien !</p>

<p>Un CTO qui se cache derrière des termes techniques ne veut pas être compris. Surtout s’il s’adresse à une population non technique. Pour un poste de communicant, cela me semble être une faute majeure.</p>

<p>Attention tout de même. Le rôle impose une communication à double sens mais le directeur doit savoir quand faire de la rétention d’informations.</p>

<p>Certains sujets stratégiques ne devraient pas être communiqués immédiatement. Ils doivent d’abord être validés dans leur ensemble, sauf décision explicite de tous les dirigeants. Communiquer trop tôt revient souvent à mal-communiquer. Les réponses aux inquiétudes qui seront soulevées n’ont pas encore été trouvées. Le projet global est encore propice à des changements. Cela créera donc de la confusion autour du message de la version initialement partagée.</p>

<p>Les dirigeants de l’entreprise n’ont pas besoin de connaître les moindres détails des problèmes rencontrés par l’équipe technique. Ils ont bien d’autres sujets à gérer à côté. Ce dont ils doivent être surs, c’est que ces sujets sont traités correctement par le CTO, c’est sa responsabilité. Seuls les problèmes de fond doivent être partagés. En mettant l’accent sur l’impact et les conséquences que cela peut avoir pour l’entreprise au global.</p>

<p><em>Nota bene : en tant que CTO, il est plaisant de s’adresser à des dirigeants qui peuvent échanger autour de concepts techniques. En particulier, s’ils comprennent leur impact sur le quotidien de l’équipe et donc de l’entreprise.</em></p>

<p>Les métriques techniques permettent d’avoir un support commun qui facilite la communication à double sens. Je recommande l’usage de métriques telles que définies par le <a href="https://queue.acm.org/detail.cfm?id=3454124" target="_blank">framework SPACE</a> ou les <a href="https://www.atlassian.com/devops/frameworks/dora-metrics" target="_blank">Four Keys Metrics</a>. La mesure de la productivité technique est un sujet débattu et régulièrement remis en question. Pour autant, ces métriques permettent de tous parler le même langage. Elles rendent visibles l’impact des choix organisationnels ou techniques. Donc de leur contribution au business, et ce, malgré leurs bais et défauts.</p>

<p>Vous découvrirez la troisième des compétences d’un bon CTO en vous rendant sur l’article suivant : <a href="/articles/etre-cto-ou-l-art-de-representer-plusieurs-parties">être CTO ou l’art de représenter plusieurs parties</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Le CTO a une position particulière au sein de l’entreprise. Au yeux des dirigeants, il représente l’équipe technique. Au yeux de l’équipe technique, il représente les dirigeants.]]></summary></entry><entry><title type="html">Se remettre en question : le syndrome de l’imposteur est un cadeau</title><link href="http://localhost:4000/articles/se-remettre-en-question-le-syndrome-de-l-imposteur-est-un-cadeau" rel="alternate" type="text/html" title="Se remettre en question : le syndrome de l’imposteur est un cadeau" /><published>2024-01-25T00:00:00+01:00</published><updated>2024-01-25T00:00:00+01:00</updated><id>http://localhost:4000/articles/se-remettre-en-question-le-syndrome-de-l-imposteur-est-un-cadeau</id><content type="html" xml:base="http://localhost:4000/articles/se-remettre-en-question-le-syndrome-de-l-imposteur-est-un-cadeau"><![CDATA[<p>La première des compétences qu’il me semble nécessaire de trouver chez un CTO est sa capacité à se remettre en question. De mon expérience, celle-ci s’accompagne parfois de ce que l’on nomme le <a href="https://fr.wikipedia.org/wiki/Syndrome_de_l%27imposteur" target="_blank">syndrome de l’imposteur</a>. Un doute maladif qui nie les accomplissements personnels.</p>

<p>Cet article est la deuxième partie d’une série axée sur les compétences à chercher chez un CTO. Si vous n’avez pas encore lu le premier article, je vous encourage à le faire ici : <a href="/articles/qu-est-ce-q-un-bon-cto">qu’est ce qu’un bon CTO ?</a></p>

<p>La remise en question est bien plus qu’une compétence, c’est une qualité et c’est ce qui en fait sa force. Les compétences peuvent s’apprendre et se maitriser. Il serait donc regrettable de refuser quelqu’un à un poste parce qu’il lui en manque une. Par contre, les qualités et les défauts constituent notre personnalité. Ils évoluent peu (ou très lentement) au fil des ans et sont donc difficile à acquérir.</p>

<p>Le CTO, comme chacun des autres dirigeants est la seule personne de l’entreprise à avoir ce titre et ce poste. Il n’a pas d’homologues avec qui échanger sur sa fiche de poste et ses problématiques. Il peut échanger avec les autres directeurs sur des sujets communs comme le recrutement, mais aucun ne comprendra entièrement ses problématiques. Face à cela, le CTO doit cultiver un réseau de pairs en dehors de l’entreprise mais il doit surtout cultiver le doute.</p>

<p>Le doute est un état personnel particulièrement désagréable. Psychologiquement, c’est lourd à porter. Il dénigre toutes félicitations reçues et peut conduire à un état d’insatisfaction permanent. À la clé ? Des difficultés à célébrer la moindre victoire.</p>

<p>Pourtant, c’est un pré-requis primordial pour se remettre en question. Avec la remise en question vient l’apprentissage et donc la progression. Le doute crée un contexte favorable à l’ouverture d’esprit et à la recherche de connaissances.</p>

<p>J’aime beaucoup cette citation qui résume avec plus de style ce que j’essaie de dire :</p>

<blockquote>
  <p>“Le doute est à la base même du savoir, puisqu’il est la condition essentielle de la recherche de la vérité. On ne court jamais après ce qu’on croit posséder avec certitude.”</p>

  <p><em>Jean-Charles Harvey</em></p>
</blockquote>

<p>Comment répondre au doute lorsqu’il y a peu d’homologues pour partager ses interrogations ? Nous avons la chance de vivre à une époque où les informations n’ont jamais été aussi abondantes et faciles d’accès : articles, podcasts, vidéos, livres, e-books… Un bon CTO consacrera du temps à sa propre formation.</p>

<p>Si l’entreprise peut investir dans du coaching individuel, c’est un bon investissement. Surtout à ce niveau de responsabilité.</p>

<p>Douter peut faire passer une personne pour quelqu’un qui manque de convictions ou d’expérience. Quelqu’un qui n’est pas taillé pour le poste et la posture que cela demande. Au contraire, il faut être fort pour se remettre en question chaque jour et progresser.</p>

<p>Attention à ce que le CTO ne sombre pas dans l’immobilisme. Douter ne doit pas devenir un obstacle à la prise de décision et donc, à la prise de risques. Aucune situation ne sera jamais maitrisée à 100%. Il convient d’être capable de se lancer sans avoir toutes les cartes en main.</p>

<p>Si cela peut paraitre effrayant, il faut apprendre à relativiser. Beaucoup d’hommes se trouvent à des postes haut placés tout en étant particulièrement incompétents. Le pire, c’est qu’ils le vivent très bien.</p>

<p>Attention toutefois à ne pas confondre des “<em>NON</em>” de statu quo avec une fermeture d’esprit. Un directeur capable de revenir quelques heures plus tard en disant “<em>J’ai bien réfléchi</em>” ou “<em>Je me suis trompé</em>” avait juste besoin de temps pour douter. Il se forgeait une opinion solide sur la demande initiale.</p>

<p>La vie d’une entreprise est faite de hauts et de bas. De périodes de croissance et de décroissance. Vous souhaitez avoir à vos côtés un directeur capable de les traverser toutes avec succès. Vous ne souhaitez pas changer de CTO à chacune de ces étapes.</p>

<p>Pour cela, n’embauchez pas quelqu’un qui affiche une confiance aveugle en lui-même. Il sera rempli de certitudes et incapable de se remettre en question.</p>

<p>Vous découvrirez la deuxième des compétences d’un bon CTO en vous rendant sur l’article suivant : <a href="/articles/savoir-communiquer-au-coeur-du-role-de-cto">savoir communiquer, au cœur du rôle de CTO</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[La première des compétences qu’il me semble nécessaire de trouver chez un CTO est sa capacité à se remettre en question. De mon expérience, celle-ci s’accompagne parfois de ce que l’on nomme le syndrome de l’imposteur. Un doute maladif qui nie les accomplissements personnels.]]></summary></entry><entry><title type="html">Qu’est ce qu’un bon CTO ?</title><link href="http://localhost:4000/articles/qu-est-ce-q-un-bon-cto" rel="alternate" type="text/html" title="Qu’est ce qu’un bon CTO ?" /><published>2024-01-24T00:00:00+01:00</published><updated>2024-01-24T00:00:00+01:00</updated><id>http://localhost:4000/articles/qu-est-ce-q-un-bon-cto</id><content type="html" xml:base="http://localhost:4000/articles/qu-est-ce-q-un-bon-cto"><![CDATA[<p>Que vous soyez un dirigeant d’entreprise qui cherche à recruter son prochain CTO ou un développeur qui souhaite le devenir, la question des compétences à avoir pour assumer ce rôle avec succès rôle se pose inévitablement.</p>

<p>Le point négatif, c’est qu’il n’y a pas de liste universelle pour répondre à cette question. Il faut d’abord identifier à quel stade de développement en est l’entreprise. Ensuite, quelle est l’importance du département technique dans la réalisation de son chiffre d’affaires.</p>

<p>La question des compétences est primordiale. Même si le CTO est très bon, il convient que son approche corresponde à la culture et aux attentes de l’entreprise. Sans quoi, la collaboration risque d’être un échec assuré. Chaque CTO a une approche qui lui est propre et au final, beaucoup se valent. Cependant, toutes ne sont pas adaptées à toutes les entreprises.</p>

<p>Trouver le bon CTO pour une entreprise est une tâche fastidieuse et chronophage. Cela peut facilement prendre plusieurs mois, voire une année complète. Se précipiter sur le premier venu pour avancer serait par contre une erreur.</p>

<p>Si vous êtes pressé, n’hésitez pas à passer par un CTO en freelance. Il vous permettra d’avancer rapidement tout en préparant sa propre succession chez vous. Auto-promo : je fournis ce genre de prestations que vous pourrez <a href="/" target="_blank">découvrir ici</a>.</p>

<p>En parlant du stade de développement de l’entreprise, le sujet implicite est la taille de l’équipe technique. J’ai déjà eu l’occasion de l’aborder ainsi que ses impacts dans mon article : <a href="/articles/de-developpeur-backend-a-cto-un-retour-a-zero" target="_blank">de développeur backend à CTO, un retour à zéro</a>.</p>

<p>Pour faire (très) simple, des équipes de 5, 10, 25, 50… développeurs ne demanderont pas les mêmes compétences de la part du directeur technique.</p>

<p>Voici quelques exemples basés sur mon parcours personnel :</p>

<ul>
  <li>Jusqu’à 5 développeurs, le métier de CTO ressemble surtout à un rôle de développeur principal ou d’architecte technique.</li>
  <li>Entre 5 et 10, le métier évolue vers de la chefferie de projet. Nous sommes proches d’un métier d’Engineering Manager avec une dimension technique forte. Il est encore possible de mettre partiellement les mains dans le code.</li>
  <li>Passé 10 développeurs, il devient difficile de continuer à contribuer soi-même. Nous sommes moins <em>hands-on</em> et plus <em>hands-off</em>. Le CTO n’appartient plus à l’équipe technique et doit collaborer activement au sein de sa <a href="https://www.youtube.com/watch?v=BjE_mPoZPSg" target="_blank">first-team</a>. En général, les autres C-Levels. Il prends de la hauteur pour commencer à avoir un impact en dehors de son département.</li>
  <li>Au delà de 20 développeurs, le CTO rentre dans un rôle stratégique vis à vis du business. Il a un rôle d’influence auprès du management intermédiaire qui aura probablement (mais pas nécessairement) vu le jour.</li>
  <li>Je n’ai jamais expérimenté au delà de 50 développeurs et suis donc incapable de faire un retour du rôle de CTO à cette étape.</li>
</ul>

<p>La première question à se poser dans le recrutement de votre CTO est de savoir ce que vous attendez de lui. En fonction du stade de développement de votre entreprise, le métier de CTO sera radicalement différent. Les compétences demandées ne seront plus les mêmes. Plus l’équipe technique est petite, plus l’expertise technique est importante. Plus l’équipe technique est grande, plus l’expertise managériale est importante.</p>

<p>Ne négligez pas non plus le métier et la culture de l’entreprise. Ces deux points auront un impact sur le rôle du CTO au sein de l’entreprise et donc des compétences attendues. Une entreprise dont le coeur de métier n’est pas la technique aura un besoin d’innovation moins fort. Le CTO sera probablement moins impliqué au sein des sujets business.</p>

<p>Toutefois, il y a une chose qui ne change pas, peu importe le stade de développement de l’entreprise. Le CTO restera toujours le représentant de l’équipe technique vis à vis de l’entreprise et des dirigeants. Il sera le relai des informations bi-directionnelles.</p>

<p>Pour assumer ce rôle de représentation avec succès et évoluer au rythme de l’entreprise et de ses besoins, plusieurs compétences clés sont nécessaires.</p>

<p>Vous découvrirez la première de ces compétences en vous rendant sur l’article suivant : <a href="/articles/se-remettre-en-question-le-syndrome-de-l-imposteur-est-un-cadeau">se remettre en question : le syndrome de l’imposteur est un cadeau</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Que vous soyez un dirigeant d’entreprise qui cherche à recruter son prochain CTO ou un développeur qui souhaite le devenir, la question des compétences à avoir pour assumer ce rôle avec succès rôle se pose inévitablement.]]></summary></entry><entry><title type="html">Dette technique : pourquoi vous ne devriez pas faire de refonte</title><link href="http://localhost:4000/articles/dette-technique-pourquoi-vous-ne-devriez-pas-faire-de-refonte" rel="alternate" type="text/html" title="Dette technique : pourquoi vous ne devriez pas faire de refonte" /><published>2023-12-20T00:00:00+01:00</published><updated>2023-12-20T00:00:00+01:00</updated><id>http://localhost:4000/articles/dette-technique-pourquoi-vous-ne-devriez-pas-faire-de-refonte</id><content type="html" xml:base="http://localhost:4000/articles/dette-technique-pourquoi-vous-ne-devriez-pas-faire-de-refonte"><![CDATA[<p>Dans ma récente exploration de la gestion de la dette technique, j’ai partagé une perspective proactive que j’ai baptisée l’<a href="/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire">effort supplémentaire</a>. Cette approche vise à prévenir la dégradation de la base de code en maintenant une vigilance constante. Cependant, elle ne s’attaque pas aux problèmes existants, au code déjà en ruine.</p>

<p>Au fil des années, travailler sur un projet unique m’a exposé à de nombreuses requêtes de refontes, souvent étiquetées comme “dette technique”. Certains termes, tels que “refonte” et “refactoring”, déclenchent chez moi une alerte immédiate. En tant que développeur, j’ai non seulement souvent formulé ces demandes, mais je les ai aussi dirigées.</p>

<p>La refonte, malgré son aspect intimidant, est un outil essentiel pour le développement et la pérennité d’un projet de qualité. Prenons un exemple : consacrer deux mois à refondre la structure du code, puis un mois à développer une nouvelle fonctionnalité, est souvent plus bénéfique que de passer trois mois sur la fonctionnalité seule, en luttant contre les limitations existantes. Un tel investissement de temps permet non seulement d’aboutir à un meilleur produit, mais aussi d’enrichir l’ensemble du travail.</p>

<p>Alors, pourquoi les refontes m’apparaissent-elles si préoccupantes ? Le problème réside souvent dans les motivations à leur origine – elles sont parfois proposées pour de mauvaises raisons, et réussir une refonte, en particulier avec le niveau de succès escompté, est un défi ardu.</p>

<p>J’ai assisté à de nombreuses refontes échouées qui, dans le meilleur des cas, ont coûté des mois, voire des années de travail à leurs entreprises. Plus préoccupant encore, dans des situations où les ressources financières étaient limitées, le temps et les efforts consacrés à ces refontes se sont faits au détriment des impératifs commerciaux, conduisant parfois les entreprises vers une issue fatale.</p>

<p>Une des principales raisons menant à une refonte est souvent la difficulté ressentie par certains développeurs à déchiffrer le code existant écrit par d’autres. Ce défi ne signifie pas forcément que le code est défectueux ou obsolète ; il peut simplement indiquer que le code est rédigé dans un style ou une méthode peu familière pour le développeur concerné.</p>

<p>Les demandes de refonte émanent fréquemment de développeurs récemment intégrés à l’entreprise ou à un projet spécifique. Pour eux, la refonte est un moyen de se familiariser avec un environnement de code inconnu, un moyen de reprendre le contrôle dans un contexte incertain.</p>

<p>Ayant moi-même été dans cette situation, j’ai dirigé plusieurs refontes, car réécrire le code m’a aidé à comprendre ses mécanismes et à en reprendre le contrôle.</p>

<p>J’aime comparer un projet de développement logiciel à une maison. La version initiale, sans dette technique, est comparable à une maison neuve, livrée par le constructeur. Avec le temps, tout comme une maison évolue sous l’influence de ses occupants successifs, un projet informatique se transforme au gré des interventions des différents développeurs. Chaque modification, qu’elle soit mineure ou majeure, s’écarte progressivement de la conception initiale, ajoutant des couches de complexité.</p>

<p>Se lancer dans une refonte sans une compréhension approfondie du fonctionnement actuel et des raisons sous-jacentes des choix précédents peut mener à ignorer des problèmes fondamentaux ou à en créer de nouveaux. Ce phénomène est semblable à une maison qui subit des réparations successives, chacune traitant un problème immédiat sans tenir compte de l’architecture globale.</p>

<p>L’accumulation de correctifs isolés, sans une vision d’ensemble cohérente, conduit souvent les développeurs à percevoir ces modifications comme de la dette technique, appelant une refonte apparemment inévitable. Le danger réside dans le développement d’une nouvelle version qui néglige les ajustements précédents, essentiels au fonctionnement du système. Ainsi, lorsque la refonte est mise en place, des problèmes réapparaissent, nécessitant des correctifs qui, à leur tour, introduisent de la dette technique dans un projet tout neuf.</p>

<p>Cet écueil s’est manifesté chez <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> lors de la refonte de notre module d’entraînement au code de la route. Ce module avait évolué pendant cinq ans, recevant des correctifs pour s’adapter aux évolutions des navigateurs web, surtout sur mobile. Quand la nouvelle version a été lancée, de nombreux ajustements critiques, perçus à tort comme du code incompréhensible et inutile, avaient été omis. Leur absence a été rapidement ressentie, nous forçant à réintégrer ces correctifs dans la nouvelle structure, créant ainsi involontairement de la dette technique pour les futurs développeurs.</p>

<p>La refonte technique est souvent perçue comme une baguette magique pour transformer du code vieillissant en une solution parfaite. Cependant, cette vision idéaliste sous-estime la complexité du développement d’un projet. Lors d’une refonte, nous espérons que les problèmes existants disparaîtront comme par magie. Mais en réalité, le processus de développement est jalonné d’obstacles imprévus et de décisions difficiles, souvent prises dans des situations inattendues ou face à des défis difficilement surmontables.</p>

<p>Ces décisions prises en cours de route peuvent complexifier excessivement le projet. Parfois, cette complexité s’avère si grande que le nouveau code est considéré comme de la dette technique dès son lancement.</p>

<p>Nous avons vécu cette réalité en redéveloppant l’une des applications de <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a>. L’objectif était d’améliorer l’expérience utilisateur (UX) et l’interface utilisateur (UI), avec une refonte significative de certaines fonctionnalités clés et de leur architecture technique. Déjà ambitieux, ce projet a été complexifié par notre décision d’intégrer de nouvelles technologies pour résoudre certaines lacunes sans nécessité immédiate. La gestion de ces objectifs multiples nous a détournés des enjeux principaux liés au produit. Nous n’avons pas pu maîtriser entièrement les nouvelles technologies, menant à des implémentations insuffisantes et des décisions inappropriées, et finalement à la création de nouvelle dette technique.</p>

<p>Cette expérience soulève une question fondamentale : la nouvelle dette technique créée lors d’une refonte est-elle réellement préférable à l’ancienne ? Les ressources et les efforts investis dans la refonte valaient-ils la peine, étant donné les problèmes supplémentaires générés ? Cette interrogation souligne l’importance d’une approche équilibrée et réfléchie dans la gestion des projets de refonte, où les décisions sont prises en tenant compte non seulement des objectifs immédiats, mais aussi des implications à long terme.</p>

<p>La décision d’entreprendre une refonte technique porte une responsabilité considérable, souvent sous-estimée. Si la refonte est inutile ou qu’elle échoue, le temps investi représente une perte conséquente qui peut avoir des répercussions majeures sur l’entreprise.</p>

<p>Dans les petites structures, une refonte peut mobiliser une part significative de l’équipe de développement. Ce choix est compréhensible : l’objectif est de terminer le projet rapidement. Cependant, continuer à développer sur une base de code qui sera bientôt obsolète n’est généralement pas judicieux, sauf pour des correctifs urgents. Quant aux nouvelles fonctionnalités, il est souvent préférable d’attendre la mise en place de la nouvelle version pour éviter un travail redondant.</p>

<p>Cette concentration des ressources sur la refonte signifie moins de nouveautés développées en parallèle. Selon le secteur d’activité et la position sur le marché, cela peut entrainer des conséquences notables :</p>

<ul>
  <li>Incapacité pour l’équipe commerciale de proposer de nouvelles fonctionnalités, potentiellement cruciales pour conclure des contrats.</li>
  <li>Difficulté pour l’équipe produit d’identifier et d’exploiter de nouvelles opportunités commerciales.</li>
</ul>

<p>Dans les deux cas, une telle situation peut ralentir significativement la croissance de l’entreprise. Un retard dans le projet de refonte peut même menacer la survie de l’entreprise, affectant la trésorerie ou permettant à la concurrence de prendre de l’avance.</p>

<p>Le terme “refonte” est souvent employé sans considération suffisante pour la vision initiale du projet, l’historique des développements et leur impact sur les opérations commerciales. Cette approche peut sembler confortable, mais les risques associés sont souvent disproportionnés par rapport aux bénéfices attendus.</p>

<p>Et pourtant, ne pas faire évoluer une stack technique est tout aussi risqué. Les conséquences de l’inaction sont multiples : difficulté à maintenir ou à améliorer une technologie obsolète, augmentation du turnover dans l’équipe de développement, difficultés de recrutement… Ces facteurs peuvent également entraîner un ralentissement de la croissance.</p>

<p>Il est donc essentiel de trouver un équilibre délicat. D’un côté, une refonte technique risquée peut mobiliser des ressources précieuses et freiner l’innovation. De l’autre, ignorer la nécessité d’évoluer technologiquement peut compromettre la compétitivité et l’efficacité à long terme. Les entreprises doivent évaluer soigneusement le moment et l’ampleur des refontes, en les alignant stratégiquement avec leurs objectifs commerciaux et technologiques.</p>

<p>Dans le cadre du développement logiciel, la gestion du changement est une tâche délicate. Face à la nécessité d’évoluer tout en maîtrisant les risques et en optimisant le rapport coût-bénéfice, je privilégie souvent les termes <em>évolution</em> ou <em>migration</em> plutôt que <em>refonte</em>. Ces termes sont plus souples, moins restrictifs, et ouvrent la voie à une approche plus mesurée et ciblée du projet.</p>

<p>Le choix des mots est crucial. <em>Évolution</em> et <em>migration</em> suggèrent un processus graduel et réfléchi, contrairement à <em>refonte</em>, qui implique souvent une transformation radicale. Cette nuance linguistique n’est pas anodine ; elle favorise une démarche plus prudente, permettant de limiter le périmètre d’action et de mieux préparer techniquement le projet.</p>

<p>Bien sûr, le terme <em>refonte</em> peut être pertinent, mais seulement lorsqu’il est appliqué à un périmètre bien défini et maîtrisé, afin de limiter les risques en cas d’éventuels problèmes.</p>

<p>La réussite d’une évolution technique n’est pas le fruit du hasard. Elle nécessite une approche stratégique rigoureuse, fondée sur des principes clairs.</p>

<ol>
  <li><strong>Diagnostic Honnête :</strong> La première étape consiste à identifier tous les problèmes existants et à comprendre pourquoi ils sont problématiques. J’apprécie l’approche de Will Larson dans <a href="https://lethain.com/solving-the-engineering-strategy-crisis/" target="_blank">Solving the Engineering Strategy crisis</a>, qui recommande de commencer par un diagnostic franc de la situation. Cette méthode est applicable à la majorité des situations problématiques.</li>
  <li><strong>Compréhension Historique :</strong> Après le diagnostic, il est crucial de se pencher sur l’historique du projet. Comprendre les décisions passées et les problèmes rencontrés enrichit l’analyse de la situation actuelle et aide à éviter de répéter les erreurs passées.</li>
</ol>

<p>Le processus d’évolution implique de naviguer entre trois dimensions temporelles :</p>

<ul>
  <li><strong>Le Présent :</strong> Source de frustration, il crée le désir et la nécessité de changer.</li>
  <li><strong>Le Passé :</strong> Fournit un contexte pour comprendre l’origine de la frustration.</li>
  <li><strong>Le Futur :</strong> Offre la perspective d’une solution aux problèmes actuels.</li>
</ul>

<p>Construire l’avenir implique de combiner les leçons du passé avec les besoins actuels. Comme je l’ai mentionné dans d’autres écrits, adopter une vision à long terme est essentiel pour moi. Cela fournit une direction claire et un objectif à atteindre. Une fois cet idéal défini, l’essentiel du travail consiste à élaborer une stratégie qui permettra de le concrétiser.</p>

<p>L’idée d’une refonte complète, une sorte de redémarrage magique de zéro, est une vision à laquelle je ne souscris pas. Cette approche ignore la réalité du business qui ne peut se permettre une stagnation prolongée. Dans un environnement compétitif, ne pas progresser équivaut à régresser.</p>

<p>Je suis convaincu que la méthode des petites itérations successives est bien plus efficace. Pour réaliser une vision cible ambitieuse, il est judicieux de la décomposer en plusieurs projets distincts, chacun avec un objectif spécifique, qu’il soit algorithmique, architectural ou organisationnel. Cette stratégie permet de prioriser et d’ordonnancer ces projets de manière optimale.</p>

<p>En adoptant cette approche itérative, les risques d’échec sont considérablement réduits. En cas de contretemps, l’impact se limite à un seul aspect du plan global plutôt qu’à l’ensemble du projet. De plus, les durées réduites de chaque projet permettent une plus grande flexibilité pour intégrer des priorités qui émergent en cours de route.</p>

<p>Il est vrai que cette méthode peut allonger le temps total consacré à l’évolution du projet. Toutefois, j’estime qu’il vaut mieux réussir en deux ans qu’échouer en six mois. Cette approche itérative souligne l’importance d’une vision à long terme. L’essentiel n’est pas de savoir si l’on atteint l’objectif en avance ou en retard, mais de s’assurer que l’on travaille toujours sur l’élément le plus critique à un moment donné.</p>

<p>Une fois la vision globale établie et les différents projets identifiés, la prochaine étape est de déterminer comment les mettre en œuvre opérationnellement. Cette décision est cruciale pour compléter la stratégie globale.</p>

<p>La gestion d’une refonte technique est complexe, nécessitant une stratégie équilibrée pour optimiser l’utilisation des ressources sans entraver les opérations courantes de l’entreprise.</p>

<p>À ce stade, plusieurs options s’offrent à nous. Chacune présente ses avantages et ses défis, mais toutes partagent un objectif commun : progresser de manière structurée et réfléchie vers la réalisation de notre vision à long terme.</p>

<p>Une approche consiste à impliquer la majorité de l’équipe dans le projet de refonte. Bien que cette méthode puisse accélérer le processus, elle présente le risque de négliger d’autres projets importants. Une telle stratégie est viable si le projet est divisé en tâches distinctes et gérables. Cependant, elle peut entraîner des complications commerciales si cette condition n’est pas remplie.</p>

<p>Une alternative efficace est de diviser un grand projet en tâches plus petites, rapides et indépendantes, à répartir entre les développeurs. Par exemple, dans notre projet de rédaction de la documentation technique pour nos APIs, chaque développeur s’est vu attribuer deux routes à documenter par semaine. Cette approche a permis d’achever le projet sans perturber significativement les activités commerciales, tout en contribuant à la réalisation d’un objectif technique majeur à long terme.</p>

<p>La stratégie des “20% de temps technique” est populaire mais présente des défis. Elle implique que chaque membre de l’équipe consacre un jour par semaine à l’évolution technique. Cependant, cette méthode peut se heurter à deux écueils majeurs :</p>

<ul>
  <li>Les urgences commerciales tendent à éroder le temps dédié à l’évolution technique.</li>
  <li>La fragmentation hebdomadaire du travail rend difficile la gestion de tâches longues ou complexes.</li>
</ul>

<p>Dans notre expérience, cette stratégie n’est efficace que pour des projets clairement délimités, comme notre documentation d’API.</p>

<p>Pour les entreprises de taille suffisante, la solution la plus efficace est de dédier 20% de l’équipe de développement à l’évolution technique, formant ainsi une équipe spécifique, que nous appelons <em>platform</em>.</p>

<p>Cette équipe peut travailler sur une roadmap technique distincte, traitant des tâches de fond, longues ou complexes, sans entraver les priorités commerciales de l’entreprise. Elle a pour mission de soutenir le reste de l’équipe en créant un produit technique robuste et facile à utiliser pour les développeurs et autres membres de l’équipe produit.</p>

<p>Il est crucial que l’équipe <em>platform</em> reste en phase avec les réalités de l’entreprise. Elle ne doit pas se limiter à des considérations techniques pures, mais plutôt agir en tant qu’équipe de soutien, facilitant le travail des développeurs produit, designers, product managers, data analysts, etc. Une communication fluide et régulière entre les différentes équipes est indispensable pour s’assurer que l’équipe <em>platform</em> se concentre sur les problèmes pertinents.</p>

<p>Alors que nous contemplons l’avenir prometteur que nous construisons, il est crucial d’éviter de tomber dans une vision trop idéaliste et irréaliste. Il faut se rappeler que chaque frustration actuelle sera inévitablement remplacée par de nouvelles demain. Il n’y a pas de solution parfaite : chaque choix comporte ses avantages et ses inconvénients. Notre défi est de sélectionner consciemment les bénéfices que nous recherchons et les compromis que nous sommes prêts à accepter, en tenant compte de notre équipe, de notre entreprise et de ses objectifs à chaque étape de son évolution.</p>

<p>Le chemin vers la réalisation de votre vision est souvent plus long que prévu. Il est essentiel d’être patient et persévérant. Si vous parvenez à anticiper et à éviter proactivement les problèmes futurs, vous éviterez de vous retrouver acculé à des échéances techniques critiques. Cette approche vous offre la flexibilité nécessaire pour progresser à votre propre rythme.</p>

<p>N’oubliez pas que tant que vous suivez la voie vers votre objectif final, tout se passera bien, même si vous rencontrez des retards. L’important est de rester fidèle à votre trajectoire et de continuer à avancer, peu importe les obstacles rencontrés en cours de route.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Dans ma récente exploration de la gestion de la dette technique, j’ai partagé une perspective proactive que j’ai baptisée l’effort supplémentaire. Cette approche vise à prévenir la dégradation de la base de code en maintenant une vigilance constante. Cependant, elle ne s’attaque pas aux problèmes existants, au code déjà en ruine.]]></summary></entry><entry><title type="html">L’anti dette technique : la théorie de l’effort supplémentaire</title><link href="http://localhost:4000/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire" rel="alternate" type="text/html" title="L’anti dette technique : la théorie de l’effort supplémentaire" /><published>2023-12-12T00:00:00+01:00</published><updated>2023-12-12T00:00:00+01:00</updated><id>http://localhost:4000/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire</id><content type="html" xml:base="http://localhost:4000/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire"><![CDATA[<p>Après une carrière de 15 ans dans le domaine du développement logiciel, d’abord en tant que développeur puis en tant que CTO, j’ai constamment entendu parler de “dette technique”. C’est un terme si omniprésent qu’il semble avoir perdu une partie de sa signification initiale.</p>

<p>À mon sens, la dette technique se traduit principalement par une diminution de l’efficacité, se manifestant par des délais de développement allongés, souvent entravés par des imprévus ou des complications techniques nécessitant une résolution préalable. Elle engendre des frustrations, affectant autant les équipes de développement que les entreprises elles-mêmes.</p>

<p>Il est essentiel, à mon avis, de clarifier les différentes situations qui contribuent à une perte d’efficacité :</p>
<ol>
  <li><strong>La dette technique :</strong> Ce terme, devenu générique, englobe désormais toutes les défaillances techniques alors qu’il est le résultat d’un choix délibéré de privilégier une solution rapide, peu scalable, mais techniquement incomplète, en échange d’un gain de temps immédiat, au détriment de l’avenir.</li>
  <li><strong>Les prototypes en production :</strong> Ils représentent une variante de la dette technique. Développés sous la contrainte de sacrifier la qualité car “ils ne devraient pas évoluer”, ils finissent pourtant par être modifiés, car cela semble plus rapide que de repartir de zéro.</li>
  <li><strong>Le code legacy :</strong> Souvent le meilleur choix au moment de sa rédaction, ce type de code peut encore fonctionner efficacement. Cependant, il devient obsolète à mesure que le projet global et les pratiques de développement évoluent, restant le seul à ne pas être mis à jour.</li>
  <li><strong>Les mauvais choix techniques :</strong> Contrairement à la dette technique, ces choix ne sont pas délibérés. Ils résultent souvent d’une mauvaise compréhension des enjeux commerciaux, parfois mal expliqués, combinée à des choix d’architecture inappropriés, aboutissant à une solution inadaptée et techniquement pénalisante.</li>
  <li><strong>Les bugs :</strong> Leur apparition n’est généralement pas volontaire et résulte d’une conception technique incomplète, d’un manque de tests ou d’un temps insuffisant consacré aux correctifs. Cependant, choisir de ne pas corriger des bugs connus est une décision délibérée, en pesant l’impact du bug contre celui des nouvelles fonctionnalités potentielles.</li>
</ol>

<p>Regrouper toutes ces situations sous une même étiquette conduit à une solution unique pour les résoudre, alors qu’ils nécessitent chacun une approche spécifique. Cette solution souvent évoquée, presque aussi célèbre que la dette technique elle-même, est le “refactoring” : la refonte, souvent totale, de la fonctionnalité ou même du projet dans son ensemble.</p>

<p>Je ne développerai pas ici le sujet des refontes techniques, que j’ai récemment abordé dans <a href="/articles/dette-technique-pourquoi-vous-ne-devriez-pas-faire-de-refonte">cet article dédié</a>. Ce qui me préoccupe le plus dans les différentes solutions envisageables est leur nature réactive. Nous attendons que les problèmes surviennent pour les résoudre.
C’est comparable à faire de la prévention routière uniquement auprès des victimes d’accidents, alors que l’éducation devrait cibler ceux qui n’ont pas encore été impliqués dans un tel événement.</p>

<p>Depuis quelques mois, j’ai finalement réussi à théoriser et nommer une stratégie que j’applique depuis des années dans le domaine de la conception technique : l’<em>effort supplémentaire</em>. J’ai évoqué cette idée lors de ma participation à l’épisode <a href="https://open.spotify.com/episode/5QrTn83tLCFRpQPo31hY8n" target="_blank">Anticiper les bugs : Minority Report du bug</a> du podcast <a href="https://www.ifttd.io/" target="_blank">If This Then Dev</a>. Cette discussion m’a inspiré à écrire cet article pour explorer plus en profondeur cette approche.</p>

<p>En revenant sur les cinq situations de frustration que nous avons identifiés, faire le choix de l’<em>effort supplémentaire</em> apparaît comme une alternative à la dette technique et aux prototypes en production. Cette stratégie aide à réduire les bugs et les mauvais choix techniques, bien qu’elle ne puisse pas résoudre les problèmes liés au code legacy. Elle permet plutôt d’apprécier ce code pour ce qu’il est : fonctionnel et nécessitant peu d’entretien.</p>

<p>L’<em>effort supplémentaire</em> implique une vision à long terme du développement, qui peut sembler contraire aux principes du <em><a href="https://fr.wikipedia.org/wiki/YAGNI" target="_blank">YAGNI</a></em> (You Ain’t Gonna Need It) et du <em><a href="https://fr.wikipedia.org/wiki/Principe_KISS" target="_blank">KISS</a></em> (Keep It Simple, Stupid). Certains pourraient y voir de l’<em>over-engineering</em>, mais pour moi, c’est l’antithèse de la dette technique. C’est un investissement en temps aujourd’hui pour un gain en temps demain. Cette approche repose sur l’anticipation, l’exigence, la rigueur et la qualité, que je considère comme des valeurs fondamentales pour réussir ses investissements en réduisant les risques.</p>

<p>Pour illustrer cette pensée, considérons l’exemple historique des <a href="https://www.lemonde.fr/idees/article/2011/04/27/les-chenes-francais-le-tresor-de-colbert_1512747_3232.html" target="_blank">Chênes français, le trésor de Colbert</a>. Louis XIV, voulant construire une flotte, a été confronté à la nécessité de planter des milliers de chênes, qui mettent environ 100 ans à pousser. Colbert a alors mis en place des mesures et des règlementations qui ont transformé durablement les industries du bois et de la construction navale.</p>

<p>Ce qui est fascinant, c’est la capacité à se projeter loin dans le temps pour entreprendre des actions dont les effets ne se manifesteraient qu’après sa mort. Aujourd’hui, notre code forestier est encore influencé par ces décisions, et certains chênes plantés à cette époque existent toujours.</p>

<p>En tirant un parallèle avec le développement logiciel, nous pouvons observer que dans les deux cas, le succès de la démarche repose sur deux aspects :</p>

<ul>
  <li>Une vision claire des objectifs, même lointains.</li>
  <li>Une appréciation claire de ce qu’il faut préserver : pour Colbert, c’était les forêts; pour nous, c’est notre base de code.</li>
</ul>

<p>L’objectif devient alors de progresser vers nos buts, à un rythme soutenu, sans dégrader notre base de code. Nous devons définir quatre échelles de temps pour y parvenir :</p>

<ol>
  <li><strong>Le long terme :</strong> sur plusieurs années, établit la direction générale.</li>
  <li><strong>Le moyen terme :</strong> sur plusieurs mois, fournit un contexte plus détaillé pour les objectifs à court terme.</li>
  <li><strong>Le court terme :</strong> sur plusieurs semaines, représente notre travail quotidien, en anticipant le moyen terme et en visant le long terme.</li>
  <li><strong>Le très court terme :</strong> sur quelques jours, englobe les réactions immédiates à des situations imprévues comme les incidents en production ou les urgences légales.</li>
</ol>

<p>Le très court terme peut sembler moins pertinent en termes de vision et de planification, mais il est crucial pour gérer les urgences sans compromettre nos objectifs à long terme. Une analyse postérieure pour identifier des améliorations potentielles est recommandée.</p>

<p>Le court et le moyen terme représentent le quotidien et les étapes vers notre destination finale. Le backlog est au cœur de ces enjeux. Selon la taille et la structure de l’entreprise, le backlog peut prendre différentes formes, allant des notes personnelles aux listes plus formalisées.</p>

<p>La maîtrise du backlog est essentielle. Même si la majorité des éléments ne se concrétisera jamais en raison d’un ratio coût/bénéfice défavorable, il est crucial de les connaître parfaitement. Le défi n’est pas tant le manque de valeur du gain, mais souvent le coût élevé associé.</p>

<p>Lorsque je mentionne le backlog, mon intérêt ne réside pas tant dans cet outil en soi, car il n’est finalement qu’un support. La véritable valeur réside dans ce qu’il symbolise : un réservoir d’informations, de connaissances et de projets interconnectés, qui, une fois combinés, prennent du sens et commencent à tisser une histoire cohérente.</p>

<p>La notion d’<em>effort supplémentaire</em> prend tout son sens ici. Il s’agit d’exploiter chaque fonctionnalité développée, validée et mise en œuvre pour résoudre d’autres problèmes actuels ou futurs, réduisant ainsi considérablement les coûts. L’idée principale est d’ajouter plus de contexte, de scénarios et, par conséquent, de contraintes dans notre processus de réflexion en maîtrisant le backlog. Cela diffère de l’<em>over-engineering</em> en ce sens que l’objectif n’est pas de créer aujourd’hui les fonctionnalités de demain, mais de préparer le terrain pour les intégrer facilement plus tard, en ayant anticipé et évité les obstacles potentiels.</p>

<p>Prenons l’exemple concret de mon expérience chez <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a>. Lorsque nous avons entrepris de refondre notre parcours d’inscription, nous disposions de deux offres commerciales : la conduite classique en boîte manuelle et la conduite accélérée. Cependant, l’équipe savait que d’autres équipes travaillaient sur de nouvelles offres.</p>

<p>L’équipe aurait pu se limiter à un parcours d’inscription adapté uniquement aux offres existantes, laissant le soin d’intégrer les nouvelles offres aux équipes responsables de leur développement. Au lieu de cela, elle a procédé comme si ces nouvelles offres (conduite automatique, assurance permis, conduite accompagnée) existaient déjà. Cette anticipation a rendu la préparation plus complexe et allongé le temps de lancement, mais une fois les nouvelles offres lancées, elles ont été intégrées sans effort supplémentaire dans le parcours d’inscription. Ces scénarios anticipés, traités dans le cadre d’un projet similaire, ont été implémentés à moindre coût et de manière plus fluide, maintenant ainsi un haut niveau de qualité dans notre base de code.</p>

<p>C’est pour cette raison que je parle de “temps investi” plutôt que de “temps perdu”.</p>

<p>Un autre exemple est la rémunération des enseignants avec lesquels <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> collabore. Lors de la mise en place de ce système, l’objectif principal était de rémunérer chaque enseignant pour ses services et la location de son véhicule. Nous aurions pu nous arrêter là avec une solution simple, mais nous nous sommes demandé :</p>

<ul>
  <li>Les enseignants pourraient-ils être rémunérés pour d’autres services ?</li>
  <li>La rémunération pourrait-elle varier dans le temps ?</li>
</ul>

<p>Avec ces questions supplémentaires, la solution technique mise en place dépassait le strict nécessaire du périmètre initial. Elle permettait une personnalisation des motifs de rémunération et leur variation dans le temps pour chaque enseignant.</p>

<p>Cependant, nous n’avons pas défini de nouveaux motifs de rémunération ni développé le back-office pour les faire évoluer dans le temps. Mais si le besoin se présentait, nous pourrions le faire à moindre coût, les bases étant déjà en place.</p>

<p>Le temps de réflexion et de développement a été légèrement plus long que nécessaire, mais seulement de quelques heures.</p>

<p>Pendant plusieurs mois, cet investissement en temps n’a pas porté ses fruits, jusqu’à l’arrivée du COVID-19. <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> a alors décidé de soutenir ses enseignants partenaires avec une “prime exceptionnelle” pour compenser les coûts liés au matériel d’hygiène. S’en est suivie une autre prime pour compenser la hausse des prix de l’essence. Ces primes ont été mises en place très rapidement, compensant largement le surplus de temps initial. Chaque nouveau scénario traité a réduit d’autant plus le coût initial de développement.</p>

<p>Nous sommes face à un cercle vertueux en développement logiciel, où le but est de développer pour réutiliser. En procédant ainsi, chaque problème rencontré peut être résolu en exploitant des fonctionnalités préexistantes. Plus nous avons travaillé dans cette optique par le passé, plus nous disposons d’un large éventail d’options de réutilisation pour chaque nouveau défi.</p>

<p>Cette approche dépasse la simple notion de retour sur investissement. Elle représente une prophétie auto-réalisatrice : en prenant en compte un contexte étendu dans notre travail de conception, nous préparons des solutions pour des problèmes futurs. Lorsqu’un problème survient, il est aisément surmontable, la base de code ayant déjà anticipé ou prévu de l’espace pour sa résolution. Investir 10% d’effort aujourd’hui peut signifier une économie de 30% ou plus demain.</p>

<p>Je ne vois pas cette méthode en contradiction avec les principes établis de développement logiciel :</p>

<ul>
  <li><strong>Le <em>YAGNI</em> :</strong> disposer d’une gamme étendue d’outils nous prépare à de nouvelles tâches. Finalement, ces outils trouvent souvent leur utilité.</li>
  <li><strong>L’<em>over-engineering</em> :</strong> nous ne développons pas inutilement, mais nous évitons les problèmes futurs de conception.</li>
  <li><strong>Le <em>KISS</em> :</strong> même si une solution n’est pas utilisée, sa conception reste pertinente. Rien n’est superflu, tout au plus, cela apporte de la qualité.</li>
</ul>

<p>En reprenant les quatre temporalités :</p>

<ol>
  <li>Le <strong>long terme</strong> fixe la direction et guide l’équipe dans ses décisions structurales ou philosophiques.</li>
  <li>Le <strong>moyen terme</strong> enrichit le contexte et les scénarios pour la conception et le développement à court terme.</li>
  <li>Le <strong>court terme</strong> représente le travail quotidien, anticipant le moyen terme tout en progressant vers le long terme.</li>
  <li>Le <strong>très court terme</strong> inclut les imprévus qui peuvent affecter le court terme.</li>
</ol>

<p>Ainsi, l’<em>effort supplémentaire</em> n’est pas une réaction alarmiste ou passive face à la dette technique, mais une approche proactive et préventive. C’est une philosophie et un comportement à adopter pour éviter de se retrouver paralysés par une dette technique.</p>

<p>Certains pourraient argumenter que cette philosophie s’apparente à une quête excessive de qualité, suggérant qu’une concentration exclusive sur l’essentiel serait plus rapide. Toutefois, je suis convaincu que c’est précisément grâce à cette approche que nous gagnons en vitesse actuellement, souvent sans même nous en apercevoir. Je partage l’idée qu’il est préférable de nettoyer après avoir cuisiné plutôt que de remettre à plus tard; le gras s’enlève toujours plus aisément avant qu’il n’ait le temps de sécher.</p>

<p>En tant que CTO ces dernières années, j’ai rarement eu à parler de “dette technique”, ce qui ne nous a pas empêchés d’avancer et de construire les fondations de la croissance de notre entreprise. Cela ne signifie pas que tout est parfait, mais cela démontre l’existence d’alternatives à l’immobilisation d’une entreprise pour rembourser sa dette.</p>

<p>Il est important de noter que, tout comme les dettes financières, la dette technique est parfois nécessaire, particulièrement dans des situations sans alternative (start-ups en phase initiale, difficultés financières…). Mais dès que vous avez le choix, il est préférable de rembourser ces dettes, d’investir tôt et de récolter les bénéfices.</p>

<p>Pour ceux qui souhaitent approfondir leur compréhension de la dette technique, voici quelques lectures recommandées :</p>

<ul>
  <li><a href="https://martinfowler.com/bliki/TechnicalDebt.html" target="_blank">Technical Debt</a> de Martin Fowler.</li>
  <li><a href="https://medium.com/@ziobrando/from-technical-debt-to-design-integrity-48e7056b6776" target="_blank">From Technical Debt to Design Integrity</a> de Alberto Brandolini.</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Après une carrière de 15 ans dans le domaine du développement logiciel, d’abord en tant que développeur puis en tant que CTO, j’ai constamment entendu parler de “dette technique”. C’est un terme si omniprésent qu’il semble avoir perdu une partie de sa signification initiale.]]></summary></entry></feed>