<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-12T10:08:49+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Adrien Blandin, votre CTO en freelance à Lyon</title><subtitle>Après avoir développé une équipe technique de 3 à 30 personnes jusqu&apos;à l&apos;introduction en bourse  réussie de l&apos;entreprise, j&apos;ai décidé de mettre mes compétences au service de nouveaux projets.</subtitle><entry><title type="html">L’anti dette technique : la théorie de l’effort supplémentaire</title><link href="http://localhost:4000/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire" rel="alternate" type="text/html" title="L’anti dette technique : la théorie de l’effort supplémentaire" /><published>2023-12-12T00:00:00+01:00</published><updated>2023-12-12T00:00:00+01:00</updated><id>http://localhost:4000/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire</id><content type="html" xml:base="http://localhost:4000/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire"><![CDATA[<h1 id="lanti-dette-technique--la-théorie-de-leffort-supplémentaire">L’anti dette technique : la théorie de l’effort supplémentaire</h1>

<p>Après une carrière de 15 ans dans le domaine du développement logiciel, d’abord en tant que développeur puis en tant que CTO, j’ai constamment entendu parler de “dette technique”. C’est un terme si omniprésent qu’il semble avoir perdu une partie de sa signification initiale.</p>

<p>Il est essentiel, à mon avis, de clarifier les différents scénarios qui contribuent à une perte d’efficacité, générant ainsi des frustrations tant pour les équipes que pour les entreprises :</p>

<ol>
  <li><strong>La dette technique :</strong> Ce terme, devenu générique, englobe désormais toutes les défaillances techniques alors qu’il est est le résultat d’un choix délibéré de privilégier une solution rapide, peu scalable, mais techniquement incomplète, en échange d’un gain de temps immédiat, au détriment de l’avenir.</li>
  <li><strong>Les prototypes en production :</strong> Ils représentent une variante de la dette technique. Développés sous la contrainte de sacrifier la qualité car “ils ne devraient pas évoluer”, ils finissent pourtant par être modifiés, car cela semble plus rapide que de repartir de zéro.</li>
  <li><strong>Le code legacy :</strong> Souvent le meilleur choix au moment de sa rédaction, ce type de code peut encore fonctionner efficacement. Cependant, il devient obsolète à mesure que le projet global et les pratiques de développement évoluent, restant le seul à ne pas être mis à jour.</li>
  <li><strong>Les mauvais choix techniques :</strong> Contrairement à la dette technique, ces choix ne sont pas délibérés. Ils résultent souvent d’une mauvaise compréhension des enjeux commerciaux, parfois mal expliqués, combinée à des choix d’architecture inappropriés, aboutissant à une solution inadaptée et techniquement pénalisante.</li>
  <li><strong>Les bugs :</strong> Leur apparition n’est généralement pas volontaire et résulte d’une conception technique incomplète, d’un manque de tests ou d’un temps insuffisant consacré aux correctifs. Cependant, choisir de ne pas corriger des bugs connus est une décision délibérée, en pesant l’impact du bug contre celui des nouvelles fonctionnalités potentielles.</li>
</ol>

<p>Regrouper tous ces scénarios sous une même étiquette conduit à une solution unique pour les résoudre, alors qu’ils nécessitent chacun une approche spécifique. Cette solution souvent évoquée, presque aussi célèbre que la dette technique elle-même, est le “refactoring” : la refonte, souvent totale, de la fonctionnalité ou même du projet dans son ensemble.</p>

<p>Bien que je ne développerai pas ici le sujet des refontes techniques, ce qui me préoccupe le plus dans les différentes solutions envisageables est leur nature réactive. Nous attendons que les problèmes surviennent pour les résoudre.</p>

<p>C’est comparable à attendre de prendre du poids ou de tomber malade avant de recevoir des conseils sur l’exercice physique régulier et la nutrition. Ou encore, faire de la prévention routière uniquement auprès des victimes d’accidents, alors que l’éducation devrait cibler ceux qui n’ont pas encore été impliqués dans un tel événement.</p>

<p>Depuis quelques mois, j’ai finalement réussi à théoriser et nommer une stratégie que j’applique depuis des années dans le domaine de la conception technique : l’<em>effort supplémentaire</em>. J’ai évoqué cette idée lors de ma participation à l’épisode <a href="https://open.spotify.com/episode/5QrTn83tLCFRpQPo31hY8n" target="_blank">Anticiper les bugs : Minority Report du bug</a> du podcast <a href="https://www.ifttd.io/" target="_blank">If This Then Dev</a>. Cette discussion m’a inspiré à écrire cet article pour explorer plus en profondeur cette approche.</p>

<p>En revenant sur les cinq scénarios de frustration que nous avons identifiés, l’<em>effort supplémentaire</em> apparaît comme une alternative à la dette technique et aux prototypes en production. Cette stratégie aide à réduire les bugs et les mauvais choix techniques, bien qu’elle ne puisse pas résoudre les problèmes liés au code legacy. Elle permet plutôt d’apprécier ce code pour ce qu’il est : fonctionnel et nécessitant peu d’entretien.</p>

<p>L’<em>effort supplémentaire</em> implique une vision à long terme du développement, qui peut sembler contraire aux principes du <em>YAGNI</em> (You Ain’t Gonna Need It) et du <em>KISS</em> (Keep It Simple, Stupid). Certains pourraient y voir de l’o<em>ver-engineering</em>, mais pour moi, c’est l’antithèse de la dette technique : un investissement en temps aujourd’hui pour un gain en temps demain. Cette approche repose sur l’anticipation, l’exigence, la rigueur et la qualité, considérées comme des valeurs fondamentales.</p>

<p>Pour illustrer cette pensée, considérons l’exemple historique des <a href="https://www.lemonde.fr/idees/article/2011/04/27/les-chenes-francais-le-tresor-de-colbert_1512747_3232.html" target="_blank">Chênes français, le trésor de Colbert</a>. Louis XIV, voulant construire une flotte, a été confronté à la nécessité de planter des milliers de chênes, qui mettent environ 100 ans à pousser. Colbert a alors mis en place des mesures et des règlementations qui ont transformé durablement les industries du bois et de la construction navale.</p>

<p>Ce qui est fascinant, c’est la capacité à se projeter loin dans le temps pour entreprendre des actions dont les effets ne se manifesteraient qu’après sa mort. Aujourd’hui, notre code forestier est encore influencé par ces décisions, et certains chênes plantés à cette époque existent toujours.</p>

<p>En tirant un parallèle avec le développement logiciel, nous pouvons observer que dans les deux cas, le succès repose sur deux aspects :</p>

<ul>
  <li>Une vision claire des objectifs, même lointains.</li>
  <li>Une appréciation claire de ce qu’il faut préserver : pour Colbert, c’était les forêts; pour nous, c’est notre base de code.</li>
</ul>

<p>L’objectif devient alors de progresser vers nos buts, à un rythme soutenu, sans dégrader notre base de code. Nous devons définir quatre échelles de temps pour y parvenir :</p>

<ol>
  <li><strong>Le long terme :</strong> sur plusieurs années, établit la direction générale.</li>
  <li><strong>Le moyen terme :</strong> sur plusieurs mois, fournit un contexte plus détaillé pour les objectifs à court terme.</li>
  <li><strong>Le court terme :</strong> sur plusieurs semaines, représente notre travail quotidien, en anticipant le moyen terme et en visant le long terme.</li>
  <li><strong>Le très court terme :</strong> sur quelques jours, englobe les réactions immédiates à des situations imprévues comme les incidents en production ou les urgences légales.</li>
</ol>

<p>Le très court terme peut sembler moins pertinent en termes de vision et de planification, mais il est crucial pour gérer les urgences sans compromettre nos objectifs à long terme. Une analyse postérieure pour identifier des améliorations potentielles est recommandée.</p>

<p>Le court et le moyen terme représentent le quotidien et les étapes vers notre destination finale. Le backlog est au cœur de ces enjeux. Selon la taille et la structure de l’entreprise, le backlog peut prendre différentes formes, allant des notes personnelles aux listes plus formalisées.</p>

<p>La maîtrise du backlog est essentielle. Même si la majorité des éléments ne se concrétisera jamais en raison d’un ratio coût/bénéfice défavorable, il est crucial de les connaître parfaitement. Le défi n’est pas tant le manque de valeur du gain, mais souvent le coût élevé associé.</p>

<p>Lorsque je mentionne le backlog, mon intérêt ne réside pas tant dans cet outil en soi, car il n’est finalement qu’un support. La véritable valeur réside dans ce qu’il symbolise : un réservoir d’informations, de connaissances et de projets interconnectés, qui, une fois combinés, prennent du sens et commencent à tisser une histoire cohérente.</p>

<p>La notion d’<em>effort supplémentaire</em> prend tout son sens ici. Il s’agit d’exploiter chaque fonctionnalité développée, validée et mise en œuvre pour résoudre d’autres problèmes actuels ou futurs, réduisant ainsi considérablement les coûts. L’idée principale est d’ajouter plus de contexte, de scénarios et, par conséquent, de contraintes dans notre processus de réflexion en maîtrisant le backlog. Cela diffère de l’<em>over-engineering</em> en ce sens que l’objectif n’est pas de créer aujourd’hui les fonctionnalités de demain, mais de préparer le terrain pour les intégrer facilement plus tard, en ayant anticipé et évité les obstacles potentiels.</p>

<p>Prenons l’exemple concret de mon expérience chez <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a>. Lorsque nous avons entrepris de refondre notre parcours d’inscription, nous disposions de deux offres commerciales : la conduite classique en boîte manuelle et la conduite accélérée. Cependant, l’équipe savait que d’autres équipes travaillaient sur de nouvelles offres.</p>

<p>L’équipe aurait pu se limiter à un parcours d’inscription adapté uniquement aux offres existantes, laissant le soin d’intégrer les nouvelles offres aux équipes responsables de leur développement. Au lieu de cela, elle a procédé comme si ces nouvelles offres (conduite automatique, assurance permis, conduite accompagnée) existaient déjà. Cette anticipation a rendu la préparation plus complexe et allongé le temps de lancement, mais une fois les nouvelles offres lancées, elles ont été intégrées sans effort supplémentaire dans le parcours d’inscription. Ces scénarios anticipés, traités dans le cadre d’un projet similaire, ont été implémentés à moindre coût et de manière plus fluide, maintenant ainsi un haut niveau de qualité dans notre base de code.</p>

<p>C’est pour cette raison que je parle de “temps investi” plutôt que de “temps perdu”.</p>

<p>Un autre exemple est la rémunération des enseignants avec lesquels <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> collabore. Lors de la mise en place de ce système, l’objectif principal était de rémunérer chaque enseignant pour ses services et la location de son véhicule. Nous aurions pu nous arrêter là avec une solution simple, mais nous nous sommes demandé :</p>

<ul>
  <li>Les enseignants pourraient-ils être rémunérés pour d’autres services ?</li>
  <li>La rémunération pourrait-elle varier dans le temps ?</li>
</ul>

<p>Avec ces questions supplémentaires, la solution technique mise en place dépassait le strict nécessaire. Elle permettait une personnalisation des motifs de rémunération et leur variation dans le temps pour chaque enseignant.</p>

<p>Cependant, nous n’avons pas défini de nouveaux motifs de rémunération ni développé de système CRUD pour les faire évoluer dans le temps. Mais si le besoin se présentait, nous pourrions le faire à moindre coût, les bases étant déjà en place.</p>

<p>Le temps de réflexion et de développement a été légèrement plus long que nécessaire, mais seulement de quelques heures.</p>

<p>Pendant plusieurs mois, cet investissement en temps n’a pas porté ses fruits, jusqu’à l’arrivée du COVID-19. lePERMISLIBRE a alors décidé de soutenir ses enseignants partenaires avec une “prime exceptionnelle” pour compenser les coûts liés au matériel d’hygiène, suivie d’une autre prime pour compenser la hausse des prix de l’essence. Ces primes ont été mises en place très rapidement, compensant largement le surplus de temps initial. Chaque nouveau scénario traité a réduit d’autant plus le coût initial de développement.</p>

<p>Nous sommes face à un cercle vertueux en développement logiciel, où le but est de développer pour réutiliser. En procédant ainsi, chaque problème rencontré peut être résolu en exploitant des fonctionnalités préexistantes. Plus nous avons travaillé dans cette optique par le passé, plus nous disposons d’un large éventail d’options de réutilisation pour chaque nouveau défi.</p>

<p>Cette approche dépasse la simple notion de retour sur investissement. Elle représente une prophétie auto-réalisatrice : en prenant en compte un contexte étendu dans notre travail de conception, nous préparons des solutions pour des problèmes futurs. Lorsqu’un problème survient, il est aisément surmontable, la base de code ayant déjà anticipé ou prévu de l’espace pour sa résolution. Investir 10% d’effort aujourd’hui peut signifier une économie de 30% ou plus demain.</p>

<p>Je ne vois pas cette méthode en contradiction avec les principes établis de développement logiciel :</p>

<ul>
  <li><strong>Le <em>YAGNI</em> :</strong> disposer d’une gamme étendue d’outils nous prépare à de nouvelles tâches. Finalement, ces outils trouvent souvent leur utilité.</li>
  <li><strong>L’<em>over-engineering</em> :</strong> nous ne développons pas inutilement, mais nous évitons les problèmes futurs de conception.</li>
  <li><strong>Le <em>KISS</em> :</strong> même si une solution n’est pas utilisée, sa conception reste pertinente. Rien n’est superflu, tout au plus, cela apporte de la qualité.</li>
</ul>

<p>En reprenant les quatre temporalités :</p>

<ol>
  <li>Le <strong>long terme</strong> fixe la direction et guide l’équipe dans ses décisions structurales ou philosophiques.</li>
  <li>Le <strong>moyen terme</strong> enrichit le contexte et les scénarios pour la conception et le développement à court terme.</li>
  <li>Le <strong>court terme</strong> représente le travail quotidien, anticipant le moyen terme tout en progressant vers le long terme.</li>
  <li>Le <strong>très court terme</strong> inclut les imprévus qui peuvent affecter le court terme.</li>
</ol>

<p>Ainsi, l’<em>effort supplémentaire</em> n’est pas une réaction alarmiste ou passive face à la dette technique, mais une approche proactive et préventive. C’est une philosophie et un comportement à adopter pour éviter de se retrouver paralysés par une dette technique.</p>

<p>En tant que CTO ces dernières années, j’ai rarement eu à parler de “dette technique”, ce qui ne nous a pas empêchés d’avancer et de construire les fondations de la croissance de notre entreprise. Cela ne signifie pas que tout est parfait, mais cela démontre l’existence d’alternatives à l’immobilisation d’une entreprise pour rembourser sa dette.</p>

<p>Il est important de noter que, tout comme les dettes financières, la dette technique est parfois nécessaire, particulièrement dans des situations sans alternative (start-ups en phase initiale, difficultés financières…). Mais dès que vous avez le choix, il est préférable de rembourser ces dettes, d’investir tôt et de récolter les bénéfices.</p>

<p>Pour ceux qui souhaitent approfondir leur compréhension de la dette technique, voici quelques lectures recommandées :</p>

<ul>
  <li><a href="https://martinfowler.com/bliki/TechnicalDebt.html" target="_blank">Technical Debt</a> de Martin Fowler.</li>
  <li><a href="https://medium.com/@ziobrando/from-technical-debt-to-design-integrity-48e7056b6776" target="_blank">From Technical Debt to Design Integrity</a> de Alberto Brandolini.</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[L’anti dette technique : la théorie de l’effort supplémentaire]]></summary></entry><entry><title type="html">Comment réduire la complexité produit pour maintenir un système simple</title><link href="http://localhost:4000/articles/comment-reduire-la-complexite-produit-pour-maintenir-un-systeme-simple" rel="alternate" type="text/html" title="Comment réduire la complexité produit pour maintenir un système simple" /><published>2023-07-24T01:00:00+02:00</published><updated>2023-07-24T01:00:00+02:00</updated><id>http://localhost:4000/articles/comment-reduire-la-complexite-produit-pour-maintenir-un-system-simple</id><content type="html" xml:base="http://localhost:4000/articles/comment-reduire-la-complexite-produit-pour-maintenir-un-systeme-simple"><![CDATA[<p>Cet article cherche à expliquer comment <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> veille à maintenir une simplicité (donc une maintenabilité) produit &amp; technique à travers l’exemple de la création de sa nouvelle offre de conduite accélérée qui a mobilisé des dizaines de personnes, d’équipes différentes sur plus d’une année complète. Si vous n’avez pas le temps de tout lire, vous pouvez directement vous rendre en fin d’article afin de connaitre les règles que l’on essaie de s’appliquer.</p>

<p>Après plus d’un an de travail, <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> vient de sortir son offre d’apprentissage du permis de conduire en accéléré. Contrairement à notre formation standard où la réussite de l’examen peut mettre plusieurs mois (tout dépend de la motivation variable des élèves et du rythme qu’ils donnent à leur formation), notre promesse ici est de dispenser une formation complète et un passage à l’examen en moins de 2 mois. D’après nos premiers résultats, nous y arrivons même en moins d’un mois.</p>

<p>Cela en fait donc le mode de formation à privilégier pour ceux qui ont besoin du permis de conduire afin de débuter une expérience professionnelle rapidement ou ceux qui souhaitent mettre à profit leurs 2 mois de vacances estivales pour ne pas avoir à gérer leur apprentissage en parallèle de leurs études.</p>

<p>Sur le papier, cette formation est simple à comprendre, donc elle devrait être simple à mettre en place. En réalité, ce fut loin d’être le cas. Elle a ajouté de nouvelles contraintes que nous n’avions jamais eu à gérer jusqu’alors ce qui aurait pu se traduire par un ajout drastique de complexité produit, donc technique.</p>

<p>Voici les quelques règles de base que nous avons respectées durant une année entière afin de créer une nouvelle offre majeure sans perdre la simplicité de compréhension de notre plateforme.</p>

<p>La première des règles à respecter pour maintenir un produit simple est de <strong>trouver le réel problème à résoudre</strong>. Lorsque les utilisateurs ou le métier arrivent avec une demande de fonctionnalité, elle est déjà enrobée d’un contexte, de détails et de propositions de solutions.</p>

<p>Le problème avec cela, c’est que si la fonctionnalité demandée répond souvent au problème initial (avec plus ou moins de succès), elle s’intègre souvent mal avec les fonctionnalités existantes ou à venir. La mettre en oeuvre telle quelle aboutira donc à la création d’une complexité produit accidentelle, ce que l’on souhaite éviter à tout prix. En cumulant de petites complexités accidentelles sur de multiples fonctionnalités, on se retrouve irrémédiablement avec un produit complexe dans sa globalité.</p>

<p>Il y a un an, nous faisions la toute première réunion de lancement de notre projet de permis accéléré. Durant cette réunion, une quinzaine de personnes concernées étaient présentes et de nombreuses idées ont fusé sur ce à quoi devrait ressembler cette offre. Au final, rien de tout cela n’a été mis en place car l’objectif de cette première réunion était de trouver le réel problème à résoudre et non pas de sortir avec la solution à mettre en place.</p>

<p>L’obtention du permis de conduire en accéléré se réduit à une unique problématique : quelles sont les étapes chronophages d’une formation dite “standard” et comment allons-nous faire pour les raccourcir au maximum ?</p>

<p>Au moment même où l’on se pose cette question, nous nous rendons compte que finalement, ce n’est plus sur la création d’une offre de conduite accélérée que nous travaillons mais sur la réduction des délais d’apprentissage. Le permis accéléré ne sera que le packaging commercial des fonctionnalités et processus opérationnels que l’on mettra en oeuvre pour réduire nos délais d’apprentissage à leur strict minimum.</p>

<p>Comprendre cette distinction est fondamental, c’est elle qui nous permettra de penser un produit sans complexité et donc maintenable sur du long terme.</p>

<p>Lorsque l’on a réalisé que notre problématique était la réduction des délais et non la création d’une nouvelle offre, les différentes étapes du projet ont commencé à être visibles :</p>

<ol>
  <li>Réduire le délai de validation des démarches administratives</li>
  <li>Réduire le délai d’apprentissage et d’obtention du code de la route</li>
  <li>Réduire le délai de formation à la conduite</li>
  <li>Réduire le délai d’obtention d’une place d’examen au permis de conduite</li>
</ol>

<p>À ce stade nous arrivons à un embranchement où il devient à nouveau possible d’introduire de la complexité au sein de notre produit. <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> va désormais fournir 2 types de formation différentes (standard et accélérée) là où il n’en existait qu’une auparavant. Certaines fonctionnalités n’étant disponibles que pour l’une ou l’autre des formations, cela complexifie la compréhension globale de nos règles métiers donc de notre produit au global.</p>

<p>Et si on se projette encore un peu, il y a 2 types de formations que nous ne proposons pas encore : la conduite accompagnée et la conduite supervisée.</p>

<p>Alors, est-ce une obligation que de créer des fonctionnalités qui n’ont de sens que dans un seul type de formation ? Pour moi, la réponse est (souvent) non. Cela nous amène à la deuxième règle produit que l’on essaye de s’appliquer au quotidien : lorsque l’on doit créer une fonctionnalité qui s’applique dans tel cas <em>mais / sauf / à l’exception de</em>…, <strong>il faut supprimer tout ce qu’il y a après le <em>mais</em></strong>. Chaque mais est un si et chaque si est une nouvelle branche dans un arbre de décisions.</p>

<p>Dans notre cas “Réduire le délai de validation des démarches administratives pour le permis accéléré mais pas pour le permis standard”, il faut supprimer “mais pas pour le permis standard”.</p>

<p>Concrètement, cela se traduit par la création de fonctionnalités qui seront compatibles avec l’intégralité du produit et non pas seulement pour quelques scénarios bien définis à l’avance. Faire simple à long terme s’avère donc complexe à court terme.</p>

<p>Dans notre objectif de réduire les délais de formation dans un cadre de formation accélérée tout en restant compatibles avec l’ensemble de notre produit, nous en sommes donc arrivés à la création de 4 fonctionnalités majeures :</p>

<ol>
  <li>La création d’une nouvelle offre commerciale où <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> s’occupe de toutes les démarches administratives. Grâce à cette offre, nous terminons les démarches de nos élèves en 3 jours là où ils mettaient au moins 3 semaines au préalable. Et ce qui est incroyable, c’est que si cette offre est incluse dans notre permis accéléré, il est toutefois possible d’y souscrire en stand-alone.</li>
  <li>La création d’une nouvelle offre commerciale de “Coaching lors des révisions du code”. Grâce à cette offre, nos élèves peuvent obtenir leur examen du code en quelques semaines là où ils mettaient plusieurs mois au préalable (selon leur motivation variable). Là encore, cette offre est accessible à la fois dans notre permis accéléré mais aussi en stand-alone.</li>
  <li>La création d’une fonctionnalité à destination de nos enseignants pour planifier l’entièreté de la formation d’un élève. Là où la régularité de la formation dépendait au préalable de la régularité de l’élève, c’est désormais l’enseignant qui va décider d’un rythme adapté à l’élève tout en garantissant une formation rapide. Ici aussi nous avons mis à disposition cette fonctionnalité pour l’intégralité de nos enseignants et de nos formations. La seule subtilité c’est que cette étape est obligatoire dans une formation accélérée là où elle est facultative (mais recommandée dans une formation classique)</li>
  <li>La réservation d’une place d’examen pour l’élève avant que ce dernier ne soit réellement prêt. Ici, nous récupérons une mécanique déjà existante que nous avons décidé de déclencher plus tôt. Cette possibilité nous est permise grâce au contrat de formation accélérée qui garanti de manière quasi certaine que l’élève sera prêt le jour J.</li>
</ol>

<p>Ce que l’on voit ici, c’est qu’en enlevant le contexte de formation accélérée, nous avons été capables de penser et développer des fonctionnalités accessibles pour l’intégralité de nos utilisateurs. La compréhension produit s’en trouve facilitée ce qui implique que les développements techniques seront eux aussi facilités.</p>

<p>La formation accélérée devient finalement le simple regroupement obligatoire de fonctionnalités déjà disponibles mais facultatives. À travers ces obligations, à travers ce contrat de formation et avec un soutien pédagogique et opérationnel de nos équipes, la promesse initiale sera tenue pour l’obtention du précieux sésame.</p>

<p>L’histoire pourrait s’arrêter là mais ce serait trop simple. À ce stade, nous serions en mesure de rendre notre offre publique (nous l’avons d’ailleurs sortie en MVP privé pour obtenir des premiers retours terrains) mais cela aurait des effets secondaires assez néfastes pour la compréhension client et le service opérationnel qui en découle :</p>

<ul>
  <li>son déploiement dépend de notre capacité à trouver des enseignants volontaires pour accompagner plus rapidement les élèves</li>
  <li>les enseignants que l’on doit trouver doivent être présents sur tout le territoire national mais aussi dans les différents type de boite de transmission que l’on propose (boite auto, boite manuelle)</li>
  <li>un élève ne doit pas être capable de souscrire à une offre à laquelle il n’a pas le droit (indisponibilité géographique, autre formation déjà en cours…)
Nous nous retrouvons donc avec une complexification subie de nos offres de formation. Et si on se projette encore un peu, il y a toujours 2 types de formations que nous ne proposons pas encore et qui pourraient venir rajouter de nouvelles difficultés dans un futur proche.</li>
</ul>

<p>Désormais, la notion de formation accélérée n’existe presque plus dans nos réflexions. Si l’on veut maintenir un système simple et scalable, notre enjeu est plus global : comment gérer 4 types de formations, 2 types de boite différentes et 2 modes de financements soit 16 combinaisons différentes dans des centaines de villes en France ?</p>

<p>Nous avons donc du mettre 3 nouvelles fonctionnalités en place :</p>

<ol>
  <li>L’ajout de filtres dans notre boutique que l’on pré-remplit avec les informations connues sur un utilisateur pour ne lui proposer que ce qui l’intéresse réellement en terme de formation</li>
  <li>Un module d’éligibilité pour expliquer clairement à un utilisateur ce à quoi il est éligible ou non</li>
  <li>Un module de compatibilité de panier pour indiquer à un utilisateur si les différents produits qu’il a choisi peuvent être achetés simultanément</li>
</ol>

<p>Ces fonctionnalités ont été pensées pour des cas d’usage que l’on n’a pas encore alors que nous aurions pu nous limiter à des cas d’usage que l’on a vraiment. Cela pourrait sembler contre-productif car à court-terme, cela se traduit par un léger surcout dans le temps de mise en place desdites fonctionnalités. Toutefois, si les cas d’usage n’arrivent jamais, nous aurons mis un peu plus de temps pour faire les choses correctement et si les cas d’usage arrivent, alors la quantité de travail à ce moment sera inférieure car ils auront déjà été prévus dans le fonctionnement existant. Ne restera donc qu’à se concentrer sur les nouveautés avec lesquelles ils viennent et non pas sur l’adaptation des fonctionnalités existantes en plus.</p>

<p><strong>Savoir où l’on veut aller à moyen-terme et long-terme</strong> est donc la règle numéro 3 que l’on essaye de s’appliquer dans notre vision produit et technique. En sachant où l’on va, chaque brique que l’on ajoute quotidiennement devient un pas de plus vers notre vision au lieu de devenir un obstacle supplémentaire.</p>

<p>La quatrième règle qui me semble indispensable au maintien d’un système simple consiste en le fait d’avoir une <strong>approche <em>module-first</em></strong>. Un module est une fonctionnalité complètement autonome dans son fonctionnement. Il est capable de gérer ses pré-requis ainsi que ses cas d’erreurs.</p>

<p>Si l’on reprend l’exemple de nos filtres en boutique, nous partons du principe que leurs valeurs seront pré-remplies pour être plus pertinents aux yeux de nos utilisateurs. Cela implique que les valeurs de pré-remplissage que l’on va utiliser proviennent probablement d’un autre module de notre application. Nous avons donc une fonctionnalité A qui repose sur le bon fonctionnement d’une fonctionnalité B.</p>

<p>Je trouve cela dangereux car le jour où la fonctionnalité B change de comportement, un risque de dysfonctionnement se crée sur la fonctionnalité A. Malheureusement, la personne qui travaillera sur B n’aura probablement pas connaissance qu’en changeant quelques règles métier, elle aura des impacts néfastes à des endroits inconnus (pour elle) de l’application.</p>

<p>Il faut à tout prix prévenir ce genre d’effets indésirables car ils sont vecteurs de frustration et de perte de temps, donc d’efficacité :</p>

<ol>
  <li>L’utilisateur va être mécontent et prendre contact avec notre service client</li>
  <li>Notre service client n’aura pas de réponse immédiate à donner et va prendre contact avec l’équipe technique</li>
  <li>L’équipe technique va devoir se mettre en condition de reproduction du bug pour ensuite le corriger</li>
  <li>L’équipe technique devra communiquer la résolution du bug au service client</li>
  <li>Le service client devra reprendre contact avec l’utilisateur pour lui faire part du solutionnement de son problème</li>
  <li>Notre module de filtrage doit donc être capable de fonctionner avec ou sans valeurs pré-remplies quitte à les demander lui-même si elles lui sont nécessaires et qu’il ne les a pas.</li>
</ol>

<p>Ce qui est puissant avec cette approche module-first, c’est qu’elle vient naturellement avec la dernière règle à respecter pour la création d’un système simple et pérenne : il faut <strong>créer des composants réutilisables et réutiliser des composants déjà créés</strong>.</p>

<p>C’est quelque chose qui semble naturel une fois que l’on a un Design System mais cela reste valable même sur des développements techniques purs. Ré-utiliser des fonctionnalités ou des process existants permet de garder la logique métier à un seul et même endroit, donc à ne pas la dupliquer et devoir la maintenir à différents endroits.</p>

<p>Pour qu’une fonctionnalité soit pleinement ré-utilisable, elle doit être (au moins partiellement) configurable. Dans notre exemple de filtres pour la boutique, nous nous sommes rendus compte que nous avions les mêmes besoins pour notre module de réservation de leçons. Il a donc fallu créer un composant indépendant de son contexte (achat ou réservation) que l’on a au passage rendu configurable via les paramètres d’url. Grâce à cela, je suis capable de gérer ma boutique, mon flow de réservation ainsi que divers scénarios personnalisables via l’url pour des besoins marketing ponctuels ou pour accompagner un utilisateur qui aurait du mal à utiliser l’application de lui-même.</p>

<p>Les modules autonomes et personnalisables, en plus d’être simples à maintenir, sont aussi rapides à utiliser puisque le travail a déjà été fait. Ils permettent donc de créer de nouvelles fonctionnalités sur une base existante à une seule condition : il faut savoir faire des concessions sur la fonctionnalité parfaite pour ré-utiliser au maximum ce qui a déjà été créé et s’intégrer dans une vision d’ensemble plus simple à maintenir, donc à faire évoluer.</p>

<p><strong>Si vous avez décidé de sauter tout le texte précédent pour arriver directement aux règles à respecter dans le maintien d’un système simple, les voici :</strong></p>

<ol>
  <li>Trouver derrière les demandes de fonctionnalité, le problème de fond à résoudre</li>
  <li>Simplifier le problème de fond en évitant (au maximum) la gestion de cas particuliers</li>
  <li>Avoir une vision à moyen et long terme pour anticiper maintenant, les problèmes de demain</li>
  <li>Développer des fonctionnalités entièrement autonomes dans leur bon fonctionnement</li>
  <li>Créer des fonctionnalités configurables pour faciliter leur réutilisation</li>
  <li>Créer des fonctionnalités réutilisables et réutiliser les fonctionnalités existantes</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Cet article cherche à expliquer comment lePERMISLIBRE veille à maintenir une simplicité (donc une maintenabilité) produit &amp; technique à travers l’exemple de la création de sa nouvelle offre de conduite accélérée qui a mobilisé des dizaines de personnes, d’équipes différentes sur plus d’une année complète. Si vous n’avez pas le temps de tout lire, vous pouvez directement vous rendre en fin d’article afin de connaitre les règles que l’on essaie de s’appliquer.]]></summary></entry><entry><title type="html">De développeur backend à CTO : un retour à zéro</title><link href="http://localhost:4000/articles/de-developpeur-backend-a-cto-un-retour-a-zero" rel="alternate" type="text/html" title="De développeur backend à CTO : un retour à zéro" /><published>2021-02-24T00:00:00+01:00</published><updated>2021-02-24T00:00:00+01:00</updated><id>http://localhost:4000/articles/de-developpeur-backend-a-cto-un-retour-a-zero</id><content type="html" xml:base="http://localhost:4000/articles/de-developpeur-backend-a-cto-un-retour-a-zero"><![CDATA[<p>Il y a un an, suite au départ de notre CTO, la proposition d’assumer ce rôle m’a été faite. Cela faisait déjà 3 ans que je travaillais pour <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> en tant qu’ingénieur backend principal.</p>

<p>J’ai rejoint l’entreprise lorsqu’il n’y avait que 5 employés, cela ressemblait donc à une évolution logique pour eux comme pour moi. Après une courte période de réflexion j’ai décidé d’accepter cette proposition, n’ayant pas grand chose à perdre dans cette tentative.</p>

<p>Pour une raison inconnue, peut-être l’envie de faire un point personnel ou de partager ce que j’ai appris durant cette année, je me suis mis en tête d’écrire un bref article.</p>

<p>Si je ne devais garder qu’une seule leçon, c’est qu’être CTO n’est absolument pas l’évolution du métier de développeur. Lead Dev en est une évolution, Head Of Engineering une autre mais CTO est un métier différent, plus proche du management que de la technique.</p>

<p>J’ai par le passé tenté de créer une start-up (Canalmatch ndlr) où j’assumais le rôle de CTO. Naïvement, je pensais que cette fois-ci ne serait pas bien différent d’alors. Hors, être CTO parce qu’on est le seul développeur d’une entreprise de 2 personnes n’a rien à voir avec le fait de diriger une équipe technique au sein d’une entreprise plus conséquente (35 personnes aujourd’hui).</p>

<p>J’ai donc attaqué ce nouveau poste en pensant que peu de choses changeraient concrètement pour moi : je continuerai à développer tout en consacrant un peu de temps à la gestion d’équipe et aux réunions stratégiques de la boite.</p>

<p>Lors de ma prise de fonction, nous n’étions plus que 3 développeurs dans l’équipe. Nous devions impérativement recruter et pourtant je me sentais entièrement responsable de notre productivité et de la quantité (et la qualité) des sujets que nous pouvions traiter.</p>

<p>Durant presque un an j’ai donc passé mon temps à jongler entre le management et le développement. Ce qui est bien lorsque l’on essaye de tout faire, c’est que l’on fait tout mal. Mes développements étaient bâclés car je devais gérer l’équipe et ma gestion d’équipe était bâclée car je devais développer.</p>

<p>Ajoutez à ça une entreprise qui croît très vite et vous obtenez une année particulièrement stressante.</p>

<p>Début 2021 j’ai donc pris la décision de ne presque plus coder, ou seulement en dépannage lorsque je suis à jour de toutes mes obligations. Ce choix a été rendu bien plus facile car les développeurs recrutés au premier semestre 2020 commençaient à être parfaitement formés et autonomes. Je n’étais donc plus nécessaire techniquement.</p>

<p>C’est là que s’opère la partie difficile : accepter que l’on n’est plus développeur.</p>

<p>Cela veut par conséquent dire qu’il faut déléguer une grande partie des choix et conceptions techniques. Même si vous pensez déjà connaitre la réponse à une problématique, celle-ci doit venir de votre équipe. Ils doivent y réfléchir eux-même et arriver à leur propre solution.</p>

<p>Mais après tout, si vous embauchez des personnes que vous pensez talentueuses, c’est pour leur faire confiance non ? De toutes façons, rien ne vous empêche de participer à la conclusion d’une discussion et de vous exprimer à ce moment là.</p>

<p>Alors si je ne développe plus, si je ne suis plus dans l’opérationnel, quel est mon rôle aujourd’hui ?
Ma conclusion au terme de cette première année est que mon but est d’être là pour l’équipe. Tout tourne autour d’elle.</p>

<p>Il faut l’agrandir (si nécessaire) : cela implique de passer des heures chaque semaine à réfléchir aux recrutements pertinents, à lire des CVs et faire passer des entretiens pour trouver les profils qui viendront l’enrichir et la faire grandir.</p>

<p>Il faut la construire : une fois les profils recrutés il faut s’assurer que chacun trouve son épanouissement personnel bien sûr, mais surtout qu’il s’intègre et fonctionne en collectif. La communication et l’entraide sont la clé, les joueurs solo n’ont pas leur place. Mon rôle est donc d’impliquer tout le monde et rabâcher en permanence les règles de communication et de fonctionnement à plusieurs.</p>

<p>Si la progression personnelle est une nécessité, chacun doit aussi aider les autres à s’élever.</p>

<p>Pour que chacun puisse se concentrer sur lui-même, sur ses collègues et sur son travail il faut donc créer un cadre propice à cela :</p>
<ul>
  <li>préparer le terrain en amont des développements (workflows, maquettes, designs, wordings, conceptions techniques) pour limiter le nombre d’allers/retours lors du développement</li>
  <li>mettre en place des process de développement stricts pour favoriser l’organisation, mais pas trop pour ne pas brider l’autonomie et l’initiative
protéger l’équipe technique des sujets imprévus qui peuvent chambouler le travail en cours et les priorités du moment</li>
  <li>synchroniser le travail des différentes personnes et services impliqués pour ajouter de la fluidité dans le développement</li>
</ul>

<p>Si les développeurs sont dans l’opérationnel à court et moyen terme, l’objectif du CTO doit être de penser au long terme et à la stratégie pour l’atteindre :</p>
<ol>
  <li>identifier les problématiques à venir</li>
  <li>faire émerger (de l’équipe) l’infra et la stack voulues pour répondre aux problématiques identifiées</li>
  <li>concevoir une stratégie qui permettra de mettre en oeuvre les solutions à long terme tout en continuant à produire au quotidien</li>
  <li>s’assurer que le plan de développement se déroule correctement</li>
</ol>

<p>Au final, on prend des dizaines de micro-décisions chaque jour en espérant prendre plus souvent de bonnes décisions que de mauvaises.</p>

<p>Passer de développeur à CTO n’est pas une transition aisée. Il faut prendre conscience et accepter que c’est un métier complètement nouveau pour lequel il n’existe ni formation, ni école. C’est un métier que l’on doit apprendre sur le tas et qui demande donc une remise en question permanente : sur les projets, sur l’équipe, sur l’entreprise mais sur soi avant tout.</p>

<p>À titre personnel j’ai éprouvé trois grandes difficultés :</p>

<ul>
  <li><strong>Le manque de légitimité</strong></li>
</ul>

<p>Pourquoi moi ? Parce que j’étais le plus “ancien” à ce moment-là ? J’ai longtemps pensé qu’être à la tête d’une équipe technique impliquait nécessairement d’être la personne la plus compétente dans ce domaine.</p>

<p>Même si la connaissance technique est un pré-requis important, “être le meilleur” n’en est pas un, puisque développer n’est pas le coeur de ce métier : on est là pour manager.</p>

<p>Lorsque l’on en prend conscience, tout va mieux !</p>

<ul>
  <li><strong>Le manque de feedbacks</strong></li>
</ul>

<p>Comment savoir si l’on fait bien les choses lorsqu’il n’y a personne pour nous le dire ?</p>

<ul>
  <li><strong>Le sentiment d’improductivité</strong></li>
</ul>

<p>En tant que développeur on se sent facilement productif lorsque l’on ajoute/enlève du code. En tant que CTO, on anticipe, on organise, on fluidifie mais nous ne sommes pas dans le “concret”. Peut-on en déduire que notre boulot est bien fait tant qu’on a pas de problème majeur ?</p>

<p>Cette conception du métier de CTO est très personnelle, elle est le fruit de mes réflexions après un an passé à la tête de l’équipe technique de <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a>. Je n’ai pas la prétention de penser qu’elle est universelle ou simplement valable.</p>

<p>Je suis persuadé que mon métier est différent de celui exercé par le CTO de Doctolib, qui a lui aussi un métier différent du CTO de Google (voici un article à ce sujet que j’ai apprécié : <a href="https://calbucci.com/the-5-stages-of-cto-career-chasm-9d7c04e2ae66" target="_blank">https://calbucci.com/the-5-stages-of-cto-career-chasm-9d7c04e2ae66</a>).</p>

<p>Chaque entreprise, chaque équipe est unique et ce métier doit s’adapter aux conditions dans lesquelles il s’exerce. Je souhaitais simplement apporter mon retour sur expérience à ceux qui seraient “promus” et deviendraient à nouveau débutant dans un métier qu’ils pensaient connaitre.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Il y a un an, suite au départ de notre CTO, la proposition d’assumer ce rôle m’a été faite. Cela faisait déjà 3 ans que je travaillais pour lePERMISLIBRE en tant qu’ingénieur backend principal.]]></summary></entry></feed>