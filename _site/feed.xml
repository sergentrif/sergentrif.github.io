<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-25T16:17:11+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Adrien Blandin, votre CTO en freelance à Lyon</title><subtitle>Après avoir développé une équipe technique de 3 à 30 personnes jusqu&apos;à l&apos;introduction en bourse  réussie de l&apos;entreprise, j&apos;ai décidé de mettre mes compétences au service de nouveaux projets.</subtitle><entry><title type="html">Se remettre en question : le syndrome de l’imposteur est un cadeau</title><link href="http://localhost:4000/articles/se-remettre-en-question-le-syndrome-de-l-imposteur-est-un-cadeau" rel="alternate" type="text/html" title="Se remettre en question : le syndrome de l’imposteur est un cadeau" /><published>2024-01-25T01:00:00+01:00</published><updated>2024-01-25T01:00:00+01:00</updated><id>http://localhost:4000/articles/se-remettre-en-question-le-syndrome-de-l-imposteur-est-un-cadeau</id><content type="html" xml:base="http://localhost:4000/articles/se-remettre-en-question-le-syndrome-de-l-imposteur-est-un-cadeau"><![CDATA[<p>Cet article est la deuxième partie d’une série axée sur les compétences à chercher chez un CTO. Si vous n’avez pas encore lu le premier article, je vous encourage à le faire ici : <a href="/articles/qu-est-ce-q-un-bon-cto">qu’est ce qu’un bon CTO ?</a></p>

<p>La première des compétences qu’il me semble nécessaire de trouver chez un CTO est sa capacité à se remettre en question. De mon expérience, celle-ci s’accompagne parfois de ce que l’on nomme le <a href="https://fr.wikipedia.org/wiki/Syndrome_de_l%27imposteur" target="_blank">syndrome de l’imposteur</a>. Un doute maladif qui nie les accomplissements personnels.</p>

<p>La remise en question est bien plus qu’une compétence, c’est une qualité et c’est ce qui en fait sa force. Les compétences peuvent s’apprendre et se maitriser. Il serait donc regrettable de refuser quelqu’un à un poste parce qu’il lui en manque une. Par contre, les qualités et les défauts constituent notre personnalité. Ils évoluent peu (ou très lentement) au fil des ans et sont donc difficile à acquérir.</p>

<p>Le CTO, comme chacun des autres dirigeants est la seule personne de l’entreprise à avoir ce titre et ce poste. Il n’a pas d’homologues avec qui échanger sur sa fiche de poste et ses problématiques. Il peut échanger avec les autres directeurs sur des sujets communs comme le recrutement, mais aucun ne comprendra entièrement ses problématiques. Face à cela, le CTO doit cultiver un réseau de pairs en dehors de l’entreprise mais il doit surtout cultiver le doute.</p>

<p>Le doute est un état personnel particulièrement désagréable. Psychologiquement, c’est lourd à porter. Il dénigre toutes félicitations reçues et peut conduire à un état d’insatisfaction permanent. À la clé ? Des difficultés à célébrer la moindre victoire.</p>

<p>Pourtant, c’est un pré-requis primordial pour se remettre en question. Avec la remise en question vient l’apprentissage et donc la progression. Le doute crée un contexte favorable à l’ouverture d’esprit et à la recherche de connaissances.</p>

<p>J’aime beaucoup cette citation qui résume avec plus de style ce que j’essaie de dire :</p>

<blockquote>
  <p>“Le doute est à la base même du savoir, puisqu’il est la condition essentielle de la recherche de la vérité. On ne court jamais après ce qu’on croit posséder avec certitude.”</p>

  <p><em>Jean-Charles Harvey</em></p>
</blockquote>

<p>Comment répondre au doute lorsqu’il y a peu d’homologues pour partager ses interrogations ? Nous avons la chance de vivre à une époque où les informations n’ont jamais été aussi abondantes et faciles d’accès : articles, podcasts, vidéos, livres, e-books… Un bon CTO consacrera du temps à sa propre formation.</p>

<p>Si l’entreprise peut investir dans du coaching individuel, c’est un bon investissement. Surtout à ce niveau de responsabilité.</p>

<p>Douter peut faire passer une personne pour quelqu’un qui manque de convictions ou d’expérience. Quelqu’un qui n’est pas taillé pour le poste et la posture que cela demande. Au contraire, il faut être fort pour se remettre en question chaque jour et progresser.</p>

<p>Attention à ce que le CTO ne sombre pas dans l’immobilisme. Douter ne doit pas devenir un obstacle à la prise de décision et donc, à la prise de risques. Aucune situation ne sera jamais maitrisée à 100%. Il convient d’être capable de se lancer sans avoir toutes les cartes en main.</p>

<p>Si cela peut paraitre effrayant, il faut apprendre à relativiser. Beaucoup d’hommes se trouvent à des postes haut placés tout en étant particulièrement incompétents. Le pire, c’est qu’ils le vivent très bien.</p>

<p>Attention toutefois à ne pas confondre des “<em>NON</em>” de statu quo avec une fermeture d’esprit. Un directeur capable de revenir quelques heures plus tard en disant “<em>J’ai bien réfléchi</em>” ou “<em>Je me suis trompé</em>” avait juste besoin de temps pour douter. Il se forgeait une opinion solide sur la demande initiale.</p>

<p>La vie d’une entreprise est faite de hauts et de bas. De périodes de croissance et de décroissance. Vous souhaitez avoir à vos côtés un directeur capable de les traverser toutes avec succès. Vous ne souhaitez pas changer de CTO à chacune de ces étapes.</p>

<p>Pour cela, n’embauchez pas quelqu’un qui affiche une confiance aveugle en lui-même. Il sera rempli de certitudes et incapable de se remettre en question.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Cet article est la deuxième partie d’une série axée sur les compétences à chercher chez un CTO. Si vous n’avez pas encore lu le premier article, je vous encourage à le faire ici : qu’est ce qu’un bon CTO ?]]></summary></entry><entry><title type="html">Qu’est ce qu’un bon CTO ?</title><link href="http://localhost:4000/articles/qu-est-ce-q-un-bon-cto" rel="alternate" type="text/html" title="Qu’est ce qu’un bon CTO ?" /><published>2024-01-24T01:00:00+01:00</published><updated>2024-01-24T01:00:00+01:00</updated><id>http://localhost:4000/articles/qu-est-ce-q-un-bon-cto</id><content type="html" xml:base="http://localhost:4000/articles/qu-est-ce-q-un-bon-cto"><![CDATA[<p>Que vous soyez un dirigeant d’entreprise qui cherche à recruter son prochain CTO ou un développeur qui souhaite le devenir, la question des compétences à avoir pour assumer ce rôle avec succès rôle se pose inévitablement.</p>

<p>Le point négatif, c’est qu’il n’y a pas de liste universelle pour répondre à cette question. Il faut d’abord identifier à quel stade de développement en est l’entreprise. Ensuite, quelle est l’importance du département technique dans la réalisation de son chiffre d’affaires.</p>

<p>La question des compétences est primordiale. Même si le CTO est très bon, il convient que son approche corresponde à la culture et aux attentes de l’entreprise. Sans quoi, la collaboration risque d’être un échec assuré. Chaque CTO a une approche qui lui est propre et au final, beaucoup se valent. Cependant, toutes ne sont pas adaptées à toutes les entreprises.</p>

<p>Trouver le bon CTO pour une entreprise est une tâche fastidieuse et chronophage. Cela peut facilement prendre plusieurs mois, voire une année complète. Se précipiter sur le premier venu pour avancer serait par contre une erreur.</p>

<p>Si vous êtes pressé, n’hésitez pas à passer par un CTO en freelance. Il vous permettra d’avancer rapidement tout en préparant sa propre succession chez vous. Auto-promo : je fournis ce genre de prestations que vous pourrez <a href="https://adrien.blandin.dev" target="_blank">découvrir ici</a>.</p>

<p>En parlant du stade de développement de l’entreprise, le sujet implicite est la taille de l’équipe technique. J’ai déjà eu l’occasion de l’aborder ainsi que ses impacts dans mon article : <a href="/articles/de-developpeur-backend-a-cto-un-retour-a-zero" target="_blank">de développeur backend à CTO, un retour à zéro</a>.</p>

<p>Pour faire (très) simple, des équipes de 5, 10, 25, 50… développeurs ne demanderont pas les mêmes compétences de la part du directeur technique.</p>

<p>Voici quelques exemples basés sur mon parcours personnel :</p>

<ul>
  <li>Jusqu’à 5 développeurs, le métier de CTO ressemble surtout à un rôle de développeur principal ou d’architecte technique.</li>
  <li>Entre 5 et 10, le métier évolue vers de la chefferie de projet. Nous sommes proches d’un métier d’Engineering Manager avec une dimension technique forte. Il est encore possible de mettre partiellement les mains dans le code.</li>
  <li>Passé 10 développeurs, il devient difficile de continuer à contribuer soi-même. Nous sommes moins <em>hands-on</em> et plus <em>hands-off</em>. Le CTO n’appartient plus à l’équipe technique et doit collaborer activement au sein de sa “first-team”. En général, les autres C-Levels. Il prends de la hauteur pour commencer à avoir un impact en dehors de son département.</li>
  <li>Au delà de 20 développeurs, le CTO rentre dans un rôle stratégique vis à vis du business. Il a un rôle d’influence auprès du management intermédiaire qui aura probablement (mais pas nécessairement) vu le jour.</li>
  <li>Je n’ai jamais expérimenté au delà de 50 développeurs et suis donc incapable de faire un retour du rôle de CTO à cette étape.</li>
</ul>

<p>La première question à se poser dans le recrutement de votre CTO est de savoir ce que vous attendez de lui. En fonction du stade de développement de votre entreprise, le métier de CTO sera radicalement différent. Les compétences demandées ne seront plus les mêmes. Plus l’équipe technique est petite, plus l’expertise technique est importante. Plus l’équipe technique est grande, plus l’expertise managériale est importante.</p>

<p>Ne négligez pas non plus le métier et la culture de l’entreprise. Ces deux points auront un impact sur le rôle du CTO au sein de l’entreprise et donc des compétences attendues. Une entreprise dont le coeur de métier n’est pas la technique aura un besoin d’innovation moins fort. Le CTO sera probablement moins impliqué au sein des sujets business.</p>

<p>Toutefois, il y a une chose qui ne change pas, peu importe le stade de développement de l’entreprise. Le CTO restera toujours le représentant de l’équipe technique vis à vis de l’entreprise et des dirigeants. Il sera le relai des informations bi-directionnelles.</p>

<p>Pour assumer ce rôle de représentation avec succès et évoluer au rythme de l’entreprise et de ses besoins, plusieurs compétences clés sont nécessaires.</p>

<p>Vous découvrirez la première de ces compétences en vous rendant sur l’article suivant : <a href="/articles/se-remettre-en-question-le-syndrome-de-l-imposteur-est-un-cadeau">se remettre en question : le syndrome de l’imposteur est un cadeau</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Que vous soyez un dirigeant d’entreprise qui cherche à recruter son prochain CTO ou un développeur qui souhaite le devenir, la question des compétences à avoir pour assumer ce rôle avec succès rôle se pose inévitablement.]]></summary></entry><entry><title type="html">Dette technique : pourquoi vous ne devriez pas faire de refonte</title><link href="http://localhost:4000/articles/dette-technique-pourquoi-vous-ne-devriez-pas-faire-de-refonte" rel="alternate" type="text/html" title="Dette technique : pourquoi vous ne devriez pas faire de refonte" /><published>2023-12-20T01:00:00+01:00</published><updated>2023-12-20T01:00:00+01:00</updated><id>http://localhost:4000/articles/dette-technique-pourquoi-vous-ne-devriez-pas-faire-de-refonte</id><content type="html" xml:base="http://localhost:4000/articles/dette-technique-pourquoi-vous-ne-devriez-pas-faire-de-refonte"><![CDATA[<p>Dans ma récente exploration de la gestion de la dette technique, j’ai partagé une perspective proactive que j’ai baptisée l’<a href="/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire">effort supplémentaire</a>. Cette approche vise à prévenir la dégradation de la base de code en maintenant une vigilance constante. Cependant, elle ne s’attaque pas aux problèmes existants, au code déjà en ruine.</p>

<p>Au fil des années, travailler sur un projet unique m’a exposé à de nombreuses requêtes de refontes, souvent étiquetées comme “dette technique”. Certains termes, tels que “refonte” et “refactoring”, déclenchent chez moi une alerte immédiate. En tant que développeur, j’ai non seulement souvent formulé ces demandes, mais je les ai aussi dirigées.</p>

<p>La refonte, malgré son aspect intimidant, est un outil essentiel pour le développement et la pérennité d’un projet de qualité. Prenons un exemple : consacrer deux mois à refondre la structure du code, puis un mois à développer une nouvelle fonctionnalité, est souvent plus bénéfique que de passer trois mois sur la fonctionnalité seule, en luttant contre les limitations existantes. Un tel investissement de temps permet non seulement d’aboutir à un meilleur produit, mais aussi d’enrichir l’ensemble du travail.</p>

<p>Alors, pourquoi les refontes m’apparaissent-elles si préoccupantes ? Le problème réside souvent dans les motivations à leur origine – elles sont parfois proposées pour de mauvaises raisons, et réussir une refonte, en particulier avec le niveau de succès escompté, est un défi ardu.</p>

<p>J’ai assisté à de nombreuses refontes échouées qui, dans le meilleur des cas, ont coûté des mois, voire des années de travail à leurs entreprises. Plus préoccupant encore, dans des situations où les ressources financières étaient limitées, le temps et les efforts consacrés à ces refontes se sont faits au détriment des impératifs commerciaux, conduisant parfois les entreprises vers une issue fatale.</p>

<p>Une des principales raisons menant à une refonte est souvent la difficulté ressentie par certains développeurs à déchiffrer le code existant écrit par d’autres. Ce défi ne signifie pas forcément que le code est défectueux ou obsolète ; il peut simplement indiquer que le code est rédigé dans un style ou une méthode peu familière pour le développeur concerné.</p>

<p>Les demandes de refonte émanent fréquemment de développeurs récemment intégrés à l’entreprise ou à un projet spécifique. Pour eux, la refonte est un moyen de se familiariser avec un environnement de code inconnu, un moyen de reprendre le contrôle dans un contexte incertain.</p>

<p>Ayant moi-même été dans cette situation, j’ai dirigé plusieurs refontes, car réécrire le code m’a aidé à comprendre ses mécanismes et à en reprendre le contrôle.</p>

<p>J’aime comparer un projet de développement logiciel à une maison. La version initiale, sans dette technique, est comparable à une maison neuve, livrée par le constructeur. Avec le temps, tout comme une maison évolue sous l’influence de ses occupants successifs, un projet informatique se transforme au gré des interventions des différents développeurs. Chaque modification, qu’elle soit mineure ou majeure, s’écarte progressivement de la conception initiale, ajoutant des couches de complexité.</p>

<p>Se lancer dans une refonte sans une compréhension approfondie du fonctionnement actuel et des raisons sous-jacentes des choix précédents peut mener à ignorer des problèmes fondamentaux ou à en créer de nouveaux. Ce phénomène est semblable à une maison qui subit des réparations successives, chacune traitant un problème immédiat sans tenir compte de l’architecture globale.</p>

<p>L’accumulation de correctifs isolés, sans une vision d’ensemble cohérente, conduit souvent les développeurs à percevoir ces modifications comme de la dette technique, appelant une refonte apparemment inévitable. Le danger réside dans le développement d’une nouvelle version qui néglige les ajustements précédents, essentiels au fonctionnement du système. Ainsi, lorsque la refonte est mise en place, des problèmes réapparaissent, nécessitant des correctifs qui, à leur tour, introduisent de la dette technique dans un projet tout neuf.</p>

<p>Cet écueil s’est manifesté chez <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> lors de la refonte de notre module d’entraînement au code de la route. Ce module avait évolué pendant cinq ans, recevant des correctifs pour s’adapter aux évolutions des navigateurs web, surtout sur mobile. Quand la nouvelle version a été lancée, de nombreux ajustements critiques, perçus à tort comme du code incompréhensible et inutile, avaient été omis. Leur absence a été rapidement ressentie, nous forçant à réintégrer ces correctifs dans la nouvelle structure, créant ainsi involontairement de la dette technique pour les futurs développeurs.</p>

<p>La refonte technique est souvent perçue comme une baguette magique pour transformer du code vieillissant en une solution parfaite. Cependant, cette vision idéaliste sous-estime la complexité du développement d’un projet. Lors d’une refonte, nous espérons que les problèmes existants disparaîtront comme par magie. Mais en réalité, le processus de développement est jalonné d’obstacles imprévus et de décisions difficiles, souvent prises dans des situations inattendues ou face à des défis difficilement surmontables.</p>

<p>Ces décisions prises en cours de route peuvent complexifier excessivement le projet. Parfois, cette complexité s’avère si grande que le nouveau code est considéré comme de la dette technique dès son lancement.</p>

<p>Nous avons vécu cette réalité en redéveloppant l’une des applications de <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a>. L’objectif était d’améliorer l’expérience utilisateur (UX) et l’interface utilisateur (UI), avec une refonte significative de certaines fonctionnalités clés et de leur architecture technique. Déjà ambitieux, ce projet a été complexifié par notre décision d’intégrer de nouvelles technologies pour résoudre certaines lacunes sans nécessité immédiate. La gestion de ces objectifs multiples nous a détournés des enjeux principaux liés au produit. Nous n’avons pas pu maîtriser entièrement les nouvelles technologies, menant à des implémentations insuffisantes et des décisions inappropriées, et finalement à la création de nouvelle dette technique.</p>

<p>Cette expérience soulève une question fondamentale : la nouvelle dette technique créée lors d’une refonte est-elle réellement préférable à l’ancienne ? Les ressources et les efforts investis dans la refonte valaient-ils la peine, étant donné les problèmes supplémentaires générés ? Cette interrogation souligne l’importance d’une approche équilibrée et réfléchie dans la gestion des projets de refonte, où les décisions sont prises en tenant compte non seulement des objectifs immédiats, mais aussi des implications à long terme.</p>

<p>La décision d’entreprendre une refonte technique porte une responsabilité considérable, souvent sous-estimée. Si la refonte est inutile ou qu’elle échoue, le temps investi représente une perte conséquente qui peut avoir des répercussions majeures sur l’entreprise.</p>

<p>Dans les petites structures, une refonte peut mobiliser une part significative de l’équipe de développement. Ce choix est compréhensible : l’objectif est de terminer le projet rapidement. Cependant, continuer à développer sur une base de code qui sera bientôt obsolète n’est généralement pas judicieux, sauf pour des correctifs urgents. Quant aux nouvelles fonctionnalités, il est souvent préférable d’attendre la mise en place de la nouvelle version pour éviter un travail redondant.</p>

<p>Cette concentration des ressources sur la refonte signifie moins de nouveautés développées en parallèle. Selon le secteur d’activité et la position sur le marché, cela peut entrainer des conséquences notables :</p>

<ul>
  <li>Incapacité pour l’équipe commerciale de proposer de nouvelles fonctionnalités, potentiellement cruciales pour conclure des contrats.</li>
  <li>Difficulté pour l’équipe produit d’identifier et d’exploiter de nouvelles opportunités commerciales.</li>
</ul>

<p>Dans les deux cas, une telle situation peut ralentir significativement la croissance de l’entreprise. Un retard dans le projet de refonte peut même menacer la survie de l’entreprise, affectant la trésorerie ou permettant à la concurrence de prendre de l’avance.</p>

<p>Le terme “refonte” est souvent employé sans considération suffisante pour la vision initiale du projet, l’historique des développements et leur impact sur les opérations commerciales. Cette approche peut sembler confortable, mais les risques associés sont souvent disproportionnés par rapport aux bénéfices attendus.</p>

<p>Et pourtant, ne pas faire évoluer une stack technique est tout aussi risqué. Les conséquences de l’inaction sont multiples : difficulté à maintenir ou à améliorer une technologie obsolète, augmentation du turnover dans l’équipe de développement, difficultés de recrutement… Ces facteurs peuvent également entraîner un ralentissement de la croissance.</p>

<p>Il est donc essentiel de trouver un équilibre délicat. D’un côté, une refonte technique risquée peut mobiliser des ressources précieuses et freiner l’innovation. De l’autre, ignorer la nécessité d’évoluer technologiquement peut compromettre la compétitivité et l’efficacité à long terme. Les entreprises doivent évaluer soigneusement le moment et l’ampleur des refontes, en les alignant stratégiquement avec leurs objectifs commerciaux et technologiques.</p>

<p>Dans le cadre du développement logiciel, la gestion du changement est une tâche délicate. Face à la nécessité d’évoluer tout en maîtrisant les risques et en optimisant le rapport coût-bénéfice, je privilégie souvent les termes <em>évolution</em> ou <em>migration</em> plutôt que <em>refonte</em>. Ces termes sont plus souples, moins restrictifs, et ouvrent la voie à une approche plus mesurée et ciblée du projet.</p>

<p>Le choix des mots est crucial. <em>Évolution</em> et <em>migration</em> suggèrent un processus graduel et réfléchi, contrairement à <em>refonte</em>, qui implique souvent une transformation radicale. Cette nuance linguistique n’est pas anodine ; elle favorise une démarche plus prudente, permettant de limiter le périmètre d’action et de mieux préparer techniquement le projet.</p>

<p>Bien sûr, le terme <em>refonte</em> peut être pertinent, mais seulement lorsqu’il est appliqué à un périmètre bien défini et maîtrisé, afin de limiter les risques en cas d’éventuels problèmes.</p>

<p>La réussite d’une évolution technique n’est pas le fruit du hasard. Elle nécessite une approche stratégique rigoureuse, fondée sur des principes clairs.</p>

<ol>
  <li><strong>Diagnostic Honnête :</strong> La première étape consiste à identifier tous les problèmes existants et à comprendre pourquoi ils sont problématiques. J’apprécie l’approche de Will Larson dans <a href="https://lethain.com/solving-the-engineering-strategy-crisis/" target="_blank">Solving the Engineering Strategy crisis</a>, qui recommande de commencer par un diagnostic franc de la situation. Cette méthode est applicable à la majorité des situations problématiques.</li>
  <li><strong>Compréhension Historique :</strong> Après le diagnostic, il est crucial de se pencher sur l’historique du projet. Comprendre les décisions passées et les problèmes rencontrés enrichit l’analyse de la situation actuelle et aide à éviter de répéter les erreurs passées.</li>
</ol>

<p>Le processus d’évolution implique de naviguer entre trois dimensions temporelles :</p>

<ul>
  <li><strong>Le Présent :</strong> Source de frustration, il crée le désir et la nécessité de changer.</li>
  <li><strong>Le Passé :</strong> Fournit un contexte pour comprendre l’origine de la frustration.</li>
  <li><strong>Le Futur :</strong> Offre la perspective d’une solution aux problèmes actuels.</li>
</ul>

<p>Construire l’avenir implique de combiner les leçons du passé avec les besoins actuels. Comme je l’ai mentionné dans d’autres écrits, adopter une vision à long terme est essentiel pour moi. Cela fournit une direction claire et un objectif à atteindre. Une fois cet idéal défini, l’essentiel du travail consiste à élaborer une stratégie qui permettra de le concrétiser.</p>

<p>L’idée d’une refonte complète, une sorte de redémarrage magique de zéro, est une vision à laquelle je ne souscris pas. Cette approche ignore la réalité du business qui ne peut se permettre une stagnation prolongée. Dans un environnement compétitif, ne pas progresser équivaut à régresser.</p>

<p>Je suis convaincu que la méthode des petites itérations successives est bien plus efficace. Pour réaliser une vision cible ambitieuse, il est judicieux de la décomposer en plusieurs projets distincts, chacun avec un objectif spécifique, qu’il soit algorithmique, architectural ou organisationnel. Cette stratégie permet de prioriser et d’ordonnancer ces projets de manière optimale.</p>

<p>En adoptant cette approche itérative, les risques d’échec sont considérablement réduits. En cas de contretemps, l’impact se limite à un seul aspect du plan global plutôt qu’à l’ensemble du projet. De plus, les durées réduites de chaque projet permettent une plus grande flexibilité pour intégrer des priorités qui émergent en cours de route.</p>

<p>Il est vrai que cette méthode peut allonger le temps total consacré à l’évolution du projet. Toutefois, j’estime qu’il vaut mieux réussir en deux ans qu’échouer en six mois. Cette approche itérative souligne l’importance d’une vision à long terme. L’essentiel n’est pas de savoir si l’on atteint l’objectif en avance ou en retard, mais de s’assurer que l’on travaille toujours sur l’élément le plus critique à un moment donné.</p>

<p>Une fois la vision globale établie et les différents projets identifiés, la prochaine étape est de déterminer comment les mettre en œuvre opérationnellement. Cette décision est cruciale pour compléter la stratégie globale.</p>

<p>La gestion d’une refonte technique est complexe, nécessitant une stratégie équilibrée pour optimiser l’utilisation des ressources sans entraver les opérations courantes de l’entreprise.</p>

<p>À ce stade, plusieurs options s’offrent à nous. Chacune présente ses avantages et ses défis, mais toutes partagent un objectif commun : progresser de manière structurée et réfléchie vers la réalisation de notre vision à long terme.</p>

<p>Une approche consiste à impliquer la majorité de l’équipe dans le projet de refonte. Bien que cette méthode puisse accélérer le processus, elle présente le risque de négliger d’autres projets importants. Une telle stratégie est viable si le projet est divisé en tâches distinctes et gérables. Cependant, elle peut entraîner des complications commerciales si cette condition n’est pas remplie.</p>

<p>Une alternative efficace est de diviser un grand projet en tâches plus petites, rapides et indépendantes, à répartir entre les développeurs. Par exemple, dans notre projet de rédaction de la documentation technique pour nos APIs, chaque développeur s’est vu attribuer deux routes à documenter par semaine. Cette approche a permis d’achever le projet sans perturber significativement les activités commerciales, tout en contribuant à la réalisation d’un objectif technique majeur à long terme.</p>

<p>La stratégie des “20% de temps technique” est populaire mais présente des défis. Elle implique que chaque membre de l’équipe consacre un jour par semaine à l’évolution technique. Cependant, cette méthode peut se heurter à deux écueils majeurs :</p>

<ul>
  <li>Les urgences commerciales tendent à éroder le temps dédié à l’évolution technique.</li>
  <li>La fragmentation hebdomadaire du travail rend difficile la gestion de tâches longues ou complexes.</li>
</ul>

<p>Dans notre expérience, cette stratégie n’est efficace que pour des projets clairement délimités, comme notre documentation d’API.</p>

<p>Pour les entreprises de taille suffisante, la solution la plus efficace est de dédier 20% de l’équipe de développement à l’évolution technique, formant ainsi une équipe spécifique, que nous appelons <em>platform</em>.</p>

<p>Cette équipe peut travailler sur une roadmap technique distincte, traitant des tâches de fond, longues ou complexes, sans entraver les priorités commerciales de l’entreprise. Elle a pour mission de soutenir le reste de l’équipe en créant un produit technique robuste et facile à utiliser pour les développeurs et autres membres de l’équipe produit.</p>

<p>Il est crucial que l’équipe <em>platform</em> reste en phase avec les réalités de l’entreprise. Elle ne doit pas se limiter à des considérations techniques pures, mais plutôt agir en tant qu’équipe de soutien, facilitant le travail des développeurs produit, designers, product managers, data analysts, etc. Une communication fluide et régulière entre les différentes équipes est indispensable pour s’assurer que l’équipe <em>platform</em> se concentre sur les problèmes pertinents.</p>

<p>Alors que nous contemplons l’avenir prometteur que nous construisons, il est crucial d’éviter de tomber dans une vision trop idéaliste et irréaliste. Il faut se rappeler que chaque frustration actuelle sera inévitablement remplacée par de nouvelles demain. Il n’y a pas de solution parfaite : chaque choix comporte ses avantages et ses inconvénients. Notre défi est de sélectionner consciemment les bénéfices que nous recherchons et les compromis que nous sommes prêts à accepter, en tenant compte de notre équipe, de notre entreprise et de ses objectifs à chaque étape de son évolution.</p>

<p>Le chemin vers la réalisation de votre vision est souvent plus long que prévu. Il est essentiel d’être patient et persévérant. Si vous parvenez à anticiper et à éviter proactivement les problèmes futurs, vous éviterez de vous retrouver acculé à des échéances techniques critiques. Cette approche vous offre la flexibilité nécessaire pour progresser à votre propre rythme.</p>

<p>N’oubliez pas que tant que vous suivez la voie vers votre objectif final, tout se passera bien, même si vous rencontrez des retards. L’important est de rester fidèle à votre trajectoire et de continuer à avancer, peu importe les obstacles rencontrés en cours de route.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Dans ma récente exploration de la gestion de la dette technique, j’ai partagé une perspective proactive que j’ai baptisée l’effort supplémentaire. Cette approche vise à prévenir la dégradation de la base de code en maintenant une vigilance constante. Cependant, elle ne s’attaque pas aux problèmes existants, au code déjà en ruine.]]></summary></entry><entry><title type="html">L’anti dette technique : la théorie de l’effort supplémentaire</title><link href="http://localhost:4000/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire" rel="alternate" type="text/html" title="L’anti dette technique : la théorie de l’effort supplémentaire" /><published>2023-12-12T01:00:00+01:00</published><updated>2023-12-12T01:00:00+01:00</updated><id>http://localhost:4000/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire</id><content type="html" xml:base="http://localhost:4000/articles/l-anti-dette-technique-la-theorie-de-l-effort-supplementaire"><![CDATA[<p>Après une carrière de 15 ans dans le domaine du développement logiciel, d’abord en tant que développeur puis en tant que CTO, j’ai constamment entendu parler de “dette technique”. C’est un terme si omniprésent qu’il semble avoir perdu une partie de sa signification initiale.</p>

<p>À mon sens, la dette technique se traduit principalement par une diminution de l’efficacité, se manifestant par des délais de développement allongés, souvent entravés par des imprévus ou des complications techniques nécessitant une résolution préalable. Elle engendre des frustrations, affectant autant les équipes de développement que les entreprises elles-mêmes.</p>

<p>Il est essentiel, à mon avis, de clarifier les différentes situations qui contribuent à une perte d’efficacité :</p>
<ol>
  <li><strong>La dette technique :</strong> Ce terme, devenu générique, englobe désormais toutes les défaillances techniques alors qu’il est le résultat d’un choix délibéré de privilégier une solution rapide, peu scalable, mais techniquement incomplète, en échange d’un gain de temps immédiat, au détriment de l’avenir.</li>
  <li><strong>Les prototypes en production :</strong> Ils représentent une variante de la dette technique. Développés sous la contrainte de sacrifier la qualité car “ils ne devraient pas évoluer”, ils finissent pourtant par être modifiés, car cela semble plus rapide que de repartir de zéro.</li>
  <li><strong>Le code legacy :</strong> Souvent le meilleur choix au moment de sa rédaction, ce type de code peut encore fonctionner efficacement. Cependant, il devient obsolète à mesure que le projet global et les pratiques de développement évoluent, restant le seul à ne pas être mis à jour.</li>
  <li><strong>Les mauvais choix techniques :</strong> Contrairement à la dette technique, ces choix ne sont pas délibérés. Ils résultent souvent d’une mauvaise compréhension des enjeux commerciaux, parfois mal expliqués, combinée à des choix d’architecture inappropriés, aboutissant à une solution inadaptée et techniquement pénalisante.</li>
  <li><strong>Les bugs :</strong> Leur apparition n’est généralement pas volontaire et résulte d’une conception technique incomplète, d’un manque de tests ou d’un temps insuffisant consacré aux correctifs. Cependant, choisir de ne pas corriger des bugs connus est une décision délibérée, en pesant l’impact du bug contre celui des nouvelles fonctionnalités potentielles.</li>
</ol>

<p>Regrouper toutes ces situations sous une même étiquette conduit à une solution unique pour les résoudre, alors qu’ils nécessitent chacun une approche spécifique. Cette solution souvent évoquée, presque aussi célèbre que la dette technique elle-même, est le “refactoring” : la refonte, souvent totale, de la fonctionnalité ou même du projet dans son ensemble.</p>

<p>Je ne développerai pas ici le sujet des refontes techniques, que j’ai récemment abordé dans <a href="/articles/dette-technique-pourquoi-vous-ne-devriez-pas-faire-de-refonte">cet article dédié</a>. Ce qui me préoccupe le plus dans les différentes solutions envisageables est leur nature réactive. Nous attendons que les problèmes surviennent pour les résoudre.
C’est comparable à faire de la prévention routière uniquement auprès des victimes d’accidents, alors que l’éducation devrait cibler ceux qui n’ont pas encore été impliqués dans un tel événement.</p>

<p>Depuis quelques mois, j’ai finalement réussi à théoriser et nommer une stratégie que j’applique depuis des années dans le domaine de la conception technique : l’<em>effort supplémentaire</em>. J’ai évoqué cette idée lors de ma participation à l’épisode <a href="https://open.spotify.com/episode/5QrTn83tLCFRpQPo31hY8n" target="_blank">Anticiper les bugs : Minority Report du bug</a> du podcast <a href="https://www.ifttd.io/" target="_blank">If This Then Dev</a>. Cette discussion m’a inspiré à écrire cet article pour explorer plus en profondeur cette approche.</p>

<p>En revenant sur les cinq situations de frustration que nous avons identifiés, faire le choix de l’<em>effort supplémentaire</em> apparaît comme une alternative à la dette technique et aux prototypes en production. Cette stratégie aide à réduire les bugs et les mauvais choix techniques, bien qu’elle ne puisse pas résoudre les problèmes liés au code legacy. Elle permet plutôt d’apprécier ce code pour ce qu’il est : fonctionnel et nécessitant peu d’entretien.</p>

<p>L’<em>effort supplémentaire</em> implique une vision à long terme du développement, qui peut sembler contraire aux principes du <em><a href="https://fr.wikipedia.org/wiki/YAGNI" target="_blank">YAGNI</a></em> (You Ain’t Gonna Need It) et du <em><a href="https://fr.wikipedia.org/wiki/Principe_KISS" target="_blank">KISS</a></em> (Keep It Simple, Stupid). Certains pourraient y voir de l’<em>over-engineering</em>, mais pour moi, c’est l’antithèse de la dette technique. C’est un investissement en temps aujourd’hui pour un gain en temps demain. Cette approche repose sur l’anticipation, l’exigence, la rigueur et la qualité, que je considère comme des valeurs fondamentales pour réussir ses investissements en réduisant les risques.</p>

<p>Pour illustrer cette pensée, considérons l’exemple historique des <a href="https://www.lemonde.fr/idees/article/2011/04/27/les-chenes-francais-le-tresor-de-colbert_1512747_3232.html" target="_blank">Chênes français, le trésor de Colbert</a>. Louis XIV, voulant construire une flotte, a été confronté à la nécessité de planter des milliers de chênes, qui mettent environ 100 ans à pousser. Colbert a alors mis en place des mesures et des règlementations qui ont transformé durablement les industries du bois et de la construction navale.</p>

<p>Ce qui est fascinant, c’est la capacité à se projeter loin dans le temps pour entreprendre des actions dont les effets ne se manifesteraient qu’après sa mort. Aujourd’hui, notre code forestier est encore influencé par ces décisions, et certains chênes plantés à cette époque existent toujours.</p>

<p>En tirant un parallèle avec le développement logiciel, nous pouvons observer que dans les deux cas, le succès de la démarche repose sur deux aspects :</p>

<ul>
  <li>Une vision claire des objectifs, même lointains.</li>
  <li>Une appréciation claire de ce qu’il faut préserver : pour Colbert, c’était les forêts; pour nous, c’est notre base de code.</li>
</ul>

<p>L’objectif devient alors de progresser vers nos buts, à un rythme soutenu, sans dégrader notre base de code. Nous devons définir quatre échelles de temps pour y parvenir :</p>

<ol>
  <li><strong>Le long terme :</strong> sur plusieurs années, établit la direction générale.</li>
  <li><strong>Le moyen terme :</strong> sur plusieurs mois, fournit un contexte plus détaillé pour les objectifs à court terme.</li>
  <li><strong>Le court terme :</strong> sur plusieurs semaines, représente notre travail quotidien, en anticipant le moyen terme et en visant le long terme.</li>
  <li><strong>Le très court terme :</strong> sur quelques jours, englobe les réactions immédiates à des situations imprévues comme les incidents en production ou les urgences légales.</li>
</ol>

<p>Le très court terme peut sembler moins pertinent en termes de vision et de planification, mais il est crucial pour gérer les urgences sans compromettre nos objectifs à long terme. Une analyse postérieure pour identifier des améliorations potentielles est recommandée.</p>

<p>Le court et le moyen terme représentent le quotidien et les étapes vers notre destination finale. Le backlog est au cœur de ces enjeux. Selon la taille et la structure de l’entreprise, le backlog peut prendre différentes formes, allant des notes personnelles aux listes plus formalisées.</p>

<p>La maîtrise du backlog est essentielle. Même si la majorité des éléments ne se concrétisera jamais en raison d’un ratio coût/bénéfice défavorable, il est crucial de les connaître parfaitement. Le défi n’est pas tant le manque de valeur du gain, mais souvent le coût élevé associé.</p>

<p>Lorsque je mentionne le backlog, mon intérêt ne réside pas tant dans cet outil en soi, car il n’est finalement qu’un support. La véritable valeur réside dans ce qu’il symbolise : un réservoir d’informations, de connaissances et de projets interconnectés, qui, une fois combinés, prennent du sens et commencent à tisser une histoire cohérente.</p>

<p>La notion d’<em>effort supplémentaire</em> prend tout son sens ici. Il s’agit d’exploiter chaque fonctionnalité développée, validée et mise en œuvre pour résoudre d’autres problèmes actuels ou futurs, réduisant ainsi considérablement les coûts. L’idée principale est d’ajouter plus de contexte, de scénarios et, par conséquent, de contraintes dans notre processus de réflexion en maîtrisant le backlog. Cela diffère de l’<em>over-engineering</em> en ce sens que l’objectif n’est pas de créer aujourd’hui les fonctionnalités de demain, mais de préparer le terrain pour les intégrer facilement plus tard, en ayant anticipé et évité les obstacles potentiels.</p>

<p>Prenons l’exemple concret de mon expérience chez <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a>. Lorsque nous avons entrepris de refondre notre parcours d’inscription, nous disposions de deux offres commerciales : la conduite classique en boîte manuelle et la conduite accélérée. Cependant, l’équipe savait que d’autres équipes travaillaient sur de nouvelles offres.</p>

<p>L’équipe aurait pu se limiter à un parcours d’inscription adapté uniquement aux offres existantes, laissant le soin d’intégrer les nouvelles offres aux équipes responsables de leur développement. Au lieu de cela, elle a procédé comme si ces nouvelles offres (conduite automatique, assurance permis, conduite accompagnée) existaient déjà. Cette anticipation a rendu la préparation plus complexe et allongé le temps de lancement, mais une fois les nouvelles offres lancées, elles ont été intégrées sans effort supplémentaire dans le parcours d’inscription. Ces scénarios anticipés, traités dans le cadre d’un projet similaire, ont été implémentés à moindre coût et de manière plus fluide, maintenant ainsi un haut niveau de qualité dans notre base de code.</p>

<p>C’est pour cette raison que je parle de “temps investi” plutôt que de “temps perdu”.</p>

<p>Un autre exemple est la rémunération des enseignants avec lesquels <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> collabore. Lors de la mise en place de ce système, l’objectif principal était de rémunérer chaque enseignant pour ses services et la location de son véhicule. Nous aurions pu nous arrêter là avec une solution simple, mais nous nous sommes demandé :</p>

<ul>
  <li>Les enseignants pourraient-ils être rémunérés pour d’autres services ?</li>
  <li>La rémunération pourrait-elle varier dans le temps ?</li>
</ul>

<p>Avec ces questions supplémentaires, la solution technique mise en place dépassait le strict nécessaire du périmètre initial. Elle permettait une personnalisation des motifs de rémunération et leur variation dans le temps pour chaque enseignant.</p>

<p>Cependant, nous n’avons pas défini de nouveaux motifs de rémunération ni développé le back-office pour les faire évoluer dans le temps. Mais si le besoin se présentait, nous pourrions le faire à moindre coût, les bases étant déjà en place.</p>

<p>Le temps de réflexion et de développement a été légèrement plus long que nécessaire, mais seulement de quelques heures.</p>

<p>Pendant plusieurs mois, cet investissement en temps n’a pas porté ses fruits, jusqu’à l’arrivée du COVID-19. <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> a alors décidé de soutenir ses enseignants partenaires avec une “prime exceptionnelle” pour compenser les coûts liés au matériel d’hygiène. S’en est suivie une autre prime pour compenser la hausse des prix de l’essence. Ces primes ont été mises en place très rapidement, compensant largement le surplus de temps initial. Chaque nouveau scénario traité a réduit d’autant plus le coût initial de développement.</p>

<p>Nous sommes face à un cercle vertueux en développement logiciel, où le but est de développer pour réutiliser. En procédant ainsi, chaque problème rencontré peut être résolu en exploitant des fonctionnalités préexistantes. Plus nous avons travaillé dans cette optique par le passé, plus nous disposons d’un large éventail d’options de réutilisation pour chaque nouveau défi.</p>

<p>Cette approche dépasse la simple notion de retour sur investissement. Elle représente une prophétie auto-réalisatrice : en prenant en compte un contexte étendu dans notre travail de conception, nous préparons des solutions pour des problèmes futurs. Lorsqu’un problème survient, il est aisément surmontable, la base de code ayant déjà anticipé ou prévu de l’espace pour sa résolution. Investir 10% d’effort aujourd’hui peut signifier une économie de 30% ou plus demain.</p>

<p>Je ne vois pas cette méthode en contradiction avec les principes établis de développement logiciel :</p>

<ul>
  <li><strong>Le <em>YAGNI</em> :</strong> disposer d’une gamme étendue d’outils nous prépare à de nouvelles tâches. Finalement, ces outils trouvent souvent leur utilité.</li>
  <li><strong>L’<em>over-engineering</em> :</strong> nous ne développons pas inutilement, mais nous évitons les problèmes futurs de conception.</li>
  <li><strong>Le <em>KISS</em> :</strong> même si une solution n’est pas utilisée, sa conception reste pertinente. Rien n’est superflu, tout au plus, cela apporte de la qualité.</li>
</ul>

<p>En reprenant les quatre temporalités :</p>

<ol>
  <li>Le <strong>long terme</strong> fixe la direction et guide l’équipe dans ses décisions structurales ou philosophiques.</li>
  <li>Le <strong>moyen terme</strong> enrichit le contexte et les scénarios pour la conception et le développement à court terme.</li>
  <li>Le <strong>court terme</strong> représente le travail quotidien, anticipant le moyen terme tout en progressant vers le long terme.</li>
  <li>Le <strong>très court terme</strong> inclut les imprévus qui peuvent affecter le court terme.</li>
</ol>

<p>Ainsi, l’<em>effort supplémentaire</em> n’est pas une réaction alarmiste ou passive face à la dette technique, mais une approche proactive et préventive. C’est une philosophie et un comportement à adopter pour éviter de se retrouver paralysés par une dette technique.</p>

<p>Certains pourraient argumenter que cette philosophie s’apparente à une quête excessive de qualité, suggérant qu’une concentration exclusive sur l’essentiel serait plus rapide. Toutefois, je suis convaincu que c’est précisément grâce à cette approche que nous gagnons en vitesse actuellement, souvent sans même nous en apercevoir. Je partage l’idée qu’il est préférable de nettoyer après avoir cuisiné plutôt que de remettre à plus tard; le gras s’enlève toujours plus aisément avant qu’il n’ait le temps de sécher.</p>

<p>En tant que CTO ces dernières années, j’ai rarement eu à parler de “dette technique”, ce qui ne nous a pas empêchés d’avancer et de construire les fondations de la croissance de notre entreprise. Cela ne signifie pas que tout est parfait, mais cela démontre l’existence d’alternatives à l’immobilisation d’une entreprise pour rembourser sa dette.</p>

<p>Il est important de noter que, tout comme les dettes financières, la dette technique est parfois nécessaire, particulièrement dans des situations sans alternative (start-ups en phase initiale, difficultés financières…). Mais dès que vous avez le choix, il est préférable de rembourser ces dettes, d’investir tôt et de récolter les bénéfices.</p>

<p>Pour ceux qui souhaitent approfondir leur compréhension de la dette technique, voici quelques lectures recommandées :</p>

<ul>
  <li><a href="https://martinfowler.com/bliki/TechnicalDebt.html" target="_blank">Technical Debt</a> de Martin Fowler.</li>
  <li><a href="https://medium.com/@ziobrando/from-technical-debt-to-design-integrity-48e7056b6776" target="_blank">From Technical Debt to Design Integrity</a> de Alberto Brandolini.</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Après une carrière de 15 ans dans le domaine du développement logiciel, d’abord en tant que développeur puis en tant que CTO, j’ai constamment entendu parler de “dette technique”. C’est un terme si omniprésent qu’il semble avoir perdu une partie de sa signification initiale.]]></summary></entry><entry><title type="html">Comment réduire la complexité produit pour maintenir un système simple</title><link href="http://localhost:4000/articles/comment-reduire-la-complexite-produit-pour-maintenir-un-systeme-simple" rel="alternate" type="text/html" title="Comment réduire la complexité produit pour maintenir un système simple" /><published>2023-07-24T02:00:00+02:00</published><updated>2023-07-24T02:00:00+02:00</updated><id>http://localhost:4000/articles/comment-reduire-la-complexite-produit-pour-maintenir-un-system-simple</id><content type="html" xml:base="http://localhost:4000/articles/comment-reduire-la-complexite-produit-pour-maintenir-un-systeme-simple"><![CDATA[<p>Cet article cherche à expliquer comment <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> veille à maintenir une simplicité (donc une maintenabilité) produit &amp; technique à travers l’exemple de la création de sa nouvelle offre de conduite accélérée qui a mobilisé des dizaines de personnes, d’équipes différentes sur plus d’une année complète. Si vous n’avez pas le temps de tout lire, vous pouvez directement vous rendre en fin d’article afin de connaitre les règles que l’on essaie de s’appliquer.</p>

<p>Après plus d’un an de travail, <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> vient de sortir son offre d’apprentissage du permis de conduire en accéléré. Contrairement à notre formation standard où la réussite de l’examen peut mettre plusieurs mois (tout dépend de la motivation variable des élèves et du rythme qu’ils donnent à leur formation), notre promesse ici est de dispenser une formation complète et un passage à l’examen en moins de 2 mois. D’après nos premiers résultats, nous y arrivons même en moins d’un mois.</p>

<p>Cela en fait donc le mode de formation à privilégier pour ceux qui ont besoin du permis de conduire afin de débuter une expérience professionnelle rapidement ou ceux qui souhaitent mettre à profit leurs 2 mois de vacances estivales pour ne pas avoir à gérer leur apprentissage en parallèle de leurs études.</p>

<p>Sur le papier, cette formation est simple à comprendre, donc elle devrait être simple à mettre en place. En réalité, ce fut loin d’être le cas. Elle a ajouté de nouvelles contraintes que nous n’avions jamais eu à gérer jusqu’alors ce qui aurait pu se traduire par un ajout drastique de complexité produit, donc technique.</p>

<p>Voici les quelques règles de base que nous avons respectées durant une année entière afin de créer une nouvelle offre majeure sans perdre la simplicité de compréhension de notre plateforme.</p>

<p>La première des règles à respecter pour maintenir un produit simple est de <strong>trouver le réel problème à résoudre</strong>. Lorsque les utilisateurs ou le métier arrivent avec une demande de fonctionnalité, elle est déjà enrobée d’un contexte, de détails et de propositions de solutions.</p>

<p>Le problème avec cela, c’est que si la fonctionnalité demandée répond souvent au problème initial (avec plus ou moins de succès), elle s’intègre souvent mal avec les fonctionnalités existantes ou à venir. La mettre en oeuvre telle quelle aboutira donc à la création d’une complexité produit accidentelle, ce que l’on souhaite éviter à tout prix. En cumulant de petites complexités accidentelles sur de multiples fonctionnalités, on se retrouve irrémédiablement avec un produit complexe dans sa globalité.</p>

<p>Il y a un an, nous faisions la toute première réunion de lancement de notre projet de permis accéléré. Durant cette réunion, une quinzaine de personnes concernées étaient présentes et de nombreuses idées ont fusé sur ce à quoi devrait ressembler cette offre. Au final, rien de tout cela n’a été mis en place car l’objectif de cette première réunion était de trouver le réel problème à résoudre et non pas de sortir avec la solution à mettre en place.</p>

<p>L’obtention du permis de conduire en accéléré se réduit à une unique problématique : quelles sont les étapes chronophages d’une formation dite “standard” et comment allons-nous faire pour les raccourcir au maximum ?</p>

<p>Au moment même où l’on se pose cette question, nous nous rendons compte que finalement, ce n’est plus sur la création d’une offre de conduite accélérée que nous travaillons mais sur la réduction des délais d’apprentissage. Le permis accéléré ne sera que le packaging commercial des fonctionnalités et processus opérationnels que l’on mettra en oeuvre pour réduire nos délais d’apprentissage à leur strict minimum.</p>

<p>Comprendre cette distinction est fondamental, c’est elle qui nous permettra de penser un produit sans complexité et donc maintenable sur du long terme.</p>

<p>Lorsque l’on a réalisé que notre problématique était la réduction des délais et non la création d’une nouvelle offre, les différentes étapes du projet ont commencé à être visibles :</p>

<ol>
  <li>Réduire le délai de validation des démarches administratives</li>
  <li>Réduire le délai d’apprentissage et d’obtention du code de la route</li>
  <li>Réduire le délai de formation à la conduite</li>
  <li>Réduire le délai d’obtention d’une place d’examen au permis de conduite</li>
</ol>

<p>À ce stade nous arrivons à un embranchement où il devient à nouveau possible d’introduire de la complexité au sein de notre produit. <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> va désormais fournir 2 types de formation différentes (standard et accélérée) là où il n’en existait qu’une auparavant. Certaines fonctionnalités n’étant disponibles que pour l’une ou l’autre des formations, cela complexifie la compréhension globale de nos règles métiers donc de notre produit au global.</p>

<p>Et si on se projette encore un peu, il y a 2 types de formations que nous ne proposons pas encore : la conduite accompagnée et la conduite supervisée.</p>

<p>Alors, est-ce une obligation que de créer des fonctionnalités qui n’ont de sens que dans un seul type de formation ? Pour moi, la réponse est (souvent) non. Cela nous amène à la deuxième règle produit que l’on essaye de s’appliquer au quotidien : lorsque l’on doit créer une fonctionnalité qui s’applique dans tel cas <em>mais / sauf / à l’exception de</em>…, <strong>il faut supprimer tout ce qu’il y a après le <em>mais</em></strong>. Chaque mais est un si et chaque si est une nouvelle branche dans un arbre de décisions.</p>

<p>Dans notre cas “Réduire le délai de validation des démarches administratives pour le permis accéléré mais pas pour le permis standard”, il faut supprimer “mais pas pour le permis standard”.</p>

<p>Concrètement, cela se traduit par la création de fonctionnalités qui seront compatibles avec l’intégralité du produit et non pas seulement pour quelques scénarios bien définis à l’avance. Faire simple à long terme s’avère donc complexe à court terme.</p>

<p>Dans notre objectif de réduire les délais de formation dans un cadre de formation accélérée tout en restant compatibles avec l’ensemble de notre produit, nous en sommes donc arrivés à la création de 4 fonctionnalités majeures :</p>

<ol>
  <li>La création d’une nouvelle offre commerciale où <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> s’occupe de toutes les démarches administratives. Grâce à cette offre, nous terminons les démarches de nos élèves en 3 jours là où ils mettaient au moins 3 semaines au préalable. Et ce qui est incroyable, c’est que si cette offre est incluse dans notre permis accéléré, il est toutefois possible d’y souscrire en stand-alone.</li>
  <li>La création d’une nouvelle offre commerciale de “Coaching lors des révisions du code”. Grâce à cette offre, nos élèves peuvent obtenir leur examen du code en quelques semaines là où ils mettaient plusieurs mois au préalable (selon leur motivation variable). Là encore, cette offre est accessible à la fois dans notre permis accéléré mais aussi en stand-alone.</li>
  <li>La création d’une fonctionnalité à destination de nos enseignants pour planifier l’entièreté de la formation d’un élève. Là où la régularité de la formation dépendait au préalable de la régularité de l’élève, c’est désormais l’enseignant qui va décider d’un rythme adapté à l’élève tout en garantissant une formation rapide. Ici aussi nous avons mis à disposition cette fonctionnalité pour l’intégralité de nos enseignants et de nos formations. La seule subtilité c’est que cette étape est obligatoire dans une formation accélérée là où elle est facultative (mais recommandée dans une formation classique)</li>
  <li>La réservation d’une place d’examen pour l’élève avant que ce dernier ne soit réellement prêt. Ici, nous récupérons une mécanique déjà existante que nous avons décidé de déclencher plus tôt. Cette possibilité nous est permise grâce au contrat de formation accélérée qui garanti de manière quasi certaine que l’élève sera prêt le jour J.</li>
</ol>

<p>Ce que l’on voit ici, c’est qu’en enlevant le contexte de formation accélérée, nous avons été capables de penser et développer des fonctionnalités accessibles pour l’intégralité de nos utilisateurs. La compréhension produit s’en trouve facilitée ce qui implique que les développements techniques seront eux aussi facilités.</p>

<p>La formation accélérée devient finalement le simple regroupement obligatoire de fonctionnalités déjà disponibles mais facultatives. À travers ces obligations, à travers ce contrat de formation et avec un soutien pédagogique et opérationnel de nos équipes, la promesse initiale sera tenue pour l’obtention du précieux sésame.</p>

<p>L’histoire pourrait s’arrêter là mais ce serait trop simple. À ce stade, nous serions en mesure de rendre notre offre publique (nous l’avons d’ailleurs sortie en MVP privé pour obtenir des premiers retours terrains) mais cela aurait des effets secondaires assez néfastes pour la compréhension client et le service opérationnel qui en découle :</p>

<ul>
  <li>son déploiement dépend de notre capacité à trouver des enseignants volontaires pour accompagner plus rapidement les élèves</li>
  <li>les enseignants que l’on doit trouver doivent être présents sur tout le territoire national mais aussi dans les différents type de boite de transmission que l’on propose (boite auto, boite manuelle)</li>
  <li>un élève ne doit pas être capable de souscrire à une offre à laquelle il n’a pas le droit (indisponibilité géographique, autre formation déjà en cours…)
Nous nous retrouvons donc avec une complexification subie de nos offres de formation. Et si on se projette encore un peu, il y a toujours 2 types de formations que nous ne proposons pas encore et qui pourraient venir rajouter de nouvelles difficultés dans un futur proche.</li>
</ul>

<p>Désormais, la notion de formation accélérée n’existe presque plus dans nos réflexions. Si l’on veut maintenir un système simple et scalable, notre enjeu est plus global : comment gérer 4 types de formations, 2 types de boite différentes et 2 modes de financements soit 16 combinaisons différentes dans des centaines de villes en France ?</p>

<p>Nous avons donc du mettre 3 nouvelles fonctionnalités en place :</p>

<ol>
  <li>L’ajout de filtres dans notre boutique que l’on pré-remplit avec les informations connues sur un utilisateur pour ne lui proposer que ce qui l’intéresse réellement en terme de formation</li>
  <li>Un module d’éligibilité pour expliquer clairement à un utilisateur ce à quoi il est éligible ou non</li>
  <li>Un module de compatibilité de panier pour indiquer à un utilisateur si les différents produits qu’il a choisi peuvent être achetés simultanément</li>
</ol>

<p>Ces fonctionnalités ont été pensées pour des cas d’usage que l’on n’a pas encore alors que nous aurions pu nous limiter à des cas d’usage que l’on a vraiment. Cela pourrait sembler contre-productif car à court-terme, cela se traduit par un léger surcout dans le temps de mise en place desdites fonctionnalités. Toutefois, si les cas d’usage n’arrivent jamais, nous aurons mis un peu plus de temps pour faire les choses correctement et si les cas d’usage arrivent, alors la quantité de travail à ce moment sera inférieure car ils auront déjà été prévus dans le fonctionnement existant. Ne restera donc qu’à se concentrer sur les nouveautés avec lesquelles ils viennent et non pas sur l’adaptation des fonctionnalités existantes en plus.</p>

<p><strong>Savoir où l’on veut aller à moyen-terme et long-terme</strong> est donc la règle numéro 3 que l’on essaye de s’appliquer dans notre vision produit et technique. En sachant où l’on va, chaque brique que l’on ajoute quotidiennement devient un pas de plus vers notre vision au lieu de devenir un obstacle supplémentaire.</p>

<p>La quatrième règle qui me semble indispensable au maintien d’un système simple consiste en le fait d’avoir une <strong>approche <em>module-first</em></strong>. Un module est une fonctionnalité complètement autonome dans son fonctionnement. Il est capable de gérer ses pré-requis ainsi que ses cas d’erreurs.</p>

<p>Si l’on reprend l’exemple de nos filtres en boutique, nous partons du principe que leurs valeurs seront pré-remplies pour être plus pertinents aux yeux de nos utilisateurs. Cela implique que les valeurs de pré-remplissage que l’on va utiliser proviennent probablement d’un autre module de notre application. Nous avons donc une fonctionnalité A qui repose sur le bon fonctionnement d’une fonctionnalité B.</p>

<p>Je trouve cela dangereux car le jour où la fonctionnalité B change de comportement, un risque de dysfonctionnement se crée sur la fonctionnalité A. Malheureusement, la personne qui travaillera sur B n’aura probablement pas connaissance qu’en changeant quelques règles métier, elle aura des impacts néfastes à des endroits inconnus (pour elle) de l’application.</p>

<p>Il faut à tout prix prévenir ce genre d’effets indésirables car ils sont vecteurs de frustration et de perte de temps, donc d’efficacité :</p>

<ol>
  <li>L’utilisateur va être mécontent et prendre contact avec notre service client</li>
  <li>Notre service client n’aura pas de réponse immédiate à donner et va prendre contact avec l’équipe technique</li>
  <li>L’équipe technique va devoir se mettre en condition de reproduction du bug pour ensuite le corriger</li>
  <li>L’équipe technique devra communiquer la résolution du bug au service client</li>
  <li>Le service client devra reprendre contact avec l’utilisateur pour lui faire part du solutionnement de son problème</li>
  <li>Notre module de filtrage doit donc être capable de fonctionner avec ou sans valeurs pré-remplies quitte à les demander lui-même si elles lui sont nécessaires et qu’il ne les a pas.</li>
</ol>

<p>Ce qui est puissant avec cette approche module-first, c’est qu’elle vient naturellement avec la dernière règle à respecter pour la création d’un système simple et pérenne : il faut <strong>créer des composants réutilisables et réutiliser des composants déjà créés</strong>.</p>

<p>C’est quelque chose qui semble naturel une fois que l’on a un Design System mais cela reste valable même sur des développements techniques purs. Ré-utiliser des fonctionnalités ou des process existants permet de garder la logique métier à un seul et même endroit, donc à ne pas la dupliquer et devoir la maintenir à différents endroits.</p>

<p>Pour qu’une fonctionnalité soit pleinement ré-utilisable, elle doit être (au moins partiellement) configurable. Dans notre exemple de filtres pour la boutique, nous nous sommes rendus compte que nous avions les mêmes besoins pour notre module de réservation de leçons. Il a donc fallu créer un composant indépendant de son contexte (achat ou réservation) que l’on a au passage rendu configurable via les paramètres d’url. Grâce à cela, je suis capable de gérer ma boutique, mon flow de réservation ainsi que divers scénarios personnalisables via l’url pour des besoins marketing ponctuels ou pour accompagner un utilisateur qui aurait du mal à utiliser l’application de lui-même.</p>

<p>Les modules autonomes et personnalisables, en plus d’être simples à maintenir, sont aussi rapides à utiliser puisque le travail a déjà été fait. Ils permettent donc de créer de nouvelles fonctionnalités sur une base existante à une seule condition : il faut savoir faire des concessions sur la fonctionnalité parfaite pour ré-utiliser au maximum ce qui a déjà été créé et s’intégrer dans une vision d’ensemble plus simple à maintenir, donc à faire évoluer.</p>

<p><strong>Si vous avez décidé de sauter tout le texte précédent pour arriver directement aux règles à respecter dans le maintien d’un système simple, les voici :</strong></p>

<ol>
  <li>Trouver derrière les demandes de fonctionnalité, le problème de fond à résoudre</li>
  <li>Simplifier le problème de fond en évitant (au maximum) la gestion de cas particuliers</li>
  <li>Avoir une vision à moyen et long terme pour anticiper maintenant, les problèmes de demain</li>
  <li>Développer des fonctionnalités entièrement autonomes dans leur bon fonctionnement</li>
  <li>Créer des fonctionnalités configurables pour faciliter leur réutilisation</li>
  <li>Créer des fonctionnalités réutilisables et réutiliser les fonctionnalités existantes</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Cet article cherche à expliquer comment lePERMISLIBRE veille à maintenir une simplicité (donc une maintenabilité) produit &amp; technique à travers l’exemple de la création de sa nouvelle offre de conduite accélérée qui a mobilisé des dizaines de personnes, d’équipes différentes sur plus d’une année complète. Si vous n’avez pas le temps de tout lire, vous pouvez directement vous rendre en fin d’article afin de connaitre les règles que l’on essaie de s’appliquer.]]></summary></entry><entry><title type="html">De développeur backend à CTO, un retour à zéro</title><link href="http://localhost:4000/articles/de-developpeur-backend-a-cto-un-retour-a-zero" rel="alternate" type="text/html" title="De développeur backend à CTO, un retour à zéro" /><published>2021-02-24T01:00:00+01:00</published><updated>2021-02-24T01:00:00+01:00</updated><id>http://localhost:4000/articles/de-developpeur-backend-a-cto-un-retour-a-zero</id><content type="html" xml:base="http://localhost:4000/articles/de-developpeur-backend-a-cto-un-retour-a-zero"><![CDATA[<p>Il y a un an, suite au départ de notre CTO, la proposition d’assumer ce rôle m’a été faite. Cela faisait déjà 3 ans que je travaillais pour <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a> en tant qu’ingénieur backend principal.</p>

<p>J’ai rejoint l’entreprise lorsqu’il n’y avait que 5 employés, cela ressemblait donc à une évolution logique pour eux comme pour moi. Après une courte période de réflexion j’ai décidé d’accepter cette proposition, n’ayant pas grand chose à perdre dans cette tentative.</p>

<p>Pour une raison inconnue, peut-être l’envie de faire un point personnel ou de partager ce que j’ai appris durant cette année, je me suis mis en tête d’écrire un bref article.</p>

<p>Si je ne devais garder qu’une seule leçon, c’est qu’être CTO n’est absolument pas l’évolution du métier de développeur. Lead Dev en est une évolution, Head Of Engineering une autre mais CTO est un métier différent, plus proche du management que de la technique.</p>

<p>J’ai par le passé tenté de créer une start-up (Canalmatch ndlr) où j’assumais le rôle de CTO. Naïvement, je pensais que cette fois-ci ne serait pas bien différent d’alors. Hors, être CTO parce qu’on est le seul développeur d’une entreprise de 2 personnes n’a rien à voir avec le fait de diriger une équipe technique au sein d’une entreprise plus conséquente (35 personnes aujourd’hui).</p>

<p>J’ai donc attaqué ce nouveau poste en pensant que peu de choses changeraient concrètement pour moi : je continuerai à développer tout en consacrant un peu de temps à la gestion d’équipe et aux réunions stratégiques de la boite.</p>

<p>Lors de ma prise de fonction, nous n’étions plus que 3 développeurs dans l’équipe. Nous devions impérativement recruter et pourtant je me sentais entièrement responsable de notre productivité et de la quantité (et la qualité) des sujets que nous pouvions traiter.</p>

<p>Durant presque un an j’ai donc passé mon temps à jongler entre le management et le développement. Ce qui est bien lorsque l’on essaye de tout faire, c’est que l’on fait tout mal. Mes développements étaient bâclés car je devais gérer l’équipe et ma gestion d’équipe était bâclée car je devais développer.</p>

<p>Ajoutez à ça une entreprise qui croît très vite et vous obtenez une année particulièrement stressante.</p>

<p>Début 2021 j’ai donc pris la décision de ne presque plus coder, ou seulement en dépannage lorsque je suis à jour de toutes mes obligations. Ce choix a été rendu bien plus facile car les développeurs recrutés au premier semestre 2020 commençaient à être parfaitement formés et autonomes. Je n’étais donc plus nécessaire techniquement.</p>

<p>C’est là que s’opère la partie difficile : accepter que l’on n’est plus développeur.</p>

<p>Cela veut par conséquent dire qu’il faut déléguer une grande partie des choix et conceptions techniques. Même si vous pensez déjà connaitre la réponse à une problématique, celle-ci doit venir de votre équipe. Ils doivent y réfléchir eux-même et arriver à leur propre solution.</p>

<p>Mais après tout, si vous embauchez des personnes que vous pensez talentueuses, c’est pour leur faire confiance non ? De toutes façons, rien ne vous empêche de participer à la conclusion d’une discussion et de vous exprimer à ce moment là.</p>

<p>Alors si je ne développe plus, si je ne suis plus dans l’opérationnel, quel est mon rôle aujourd’hui ?
Ma conclusion au terme de cette première année est que mon but est d’être là pour l’équipe. Tout tourne autour d’elle.</p>

<p>Il faut l’agrandir (si nécessaire) : cela implique de passer des heures chaque semaine à réfléchir aux recrutements pertinents, à lire des CVs et faire passer des entretiens pour trouver les profils qui viendront l’enrichir et la faire grandir.</p>

<p>Il faut la construire : une fois les profils recrutés il faut s’assurer que chacun trouve son épanouissement personnel bien sûr, mais surtout qu’il s’intègre et fonctionne en collectif. La communication et l’entraide sont la clé, les joueurs solo n’ont pas leur place. Mon rôle est donc d’impliquer tout le monde et rabâcher en permanence les règles de communication et de fonctionnement à plusieurs.</p>

<p>Si la progression personnelle est une nécessité, chacun doit aussi aider les autres à s’élever.</p>

<p>Pour que chacun puisse se concentrer sur lui-même, sur ses collègues et sur son travail il faut donc créer un cadre propice à cela :</p>
<ul>
  <li>préparer le terrain en amont des développements (workflows, maquettes, designs, wordings, conceptions techniques) pour limiter le nombre d’allers/retours lors du développement</li>
  <li>mettre en place des process de développement stricts pour favoriser l’organisation, mais pas trop pour ne pas brider l’autonomie et l’initiative
protéger l’équipe technique des sujets imprévus qui peuvent chambouler le travail en cours et les priorités du moment</li>
  <li>synchroniser le travail des différentes personnes et services impliqués pour ajouter de la fluidité dans le développement</li>
</ul>

<p>Si les développeurs sont dans l’opérationnel à court et moyen terme, l’objectif du CTO doit être de penser au long terme et à la stratégie pour l’atteindre :</p>
<ol>
  <li>identifier les problématiques à venir</li>
  <li>faire émerger (de l’équipe) l’infra et la stack voulues pour répondre aux problématiques identifiées</li>
  <li>concevoir une stratégie qui permettra de mettre en oeuvre les solutions à long terme tout en continuant à produire au quotidien</li>
  <li>s’assurer que le plan de développement se déroule correctement</li>
</ol>

<p>Au final, on prend des dizaines de micro-décisions chaque jour en espérant prendre plus souvent de bonnes décisions que de mauvaises.</p>

<p>Passer de développeur à CTO n’est pas une transition aisée. Il faut prendre conscience et accepter que c’est un métier complètement nouveau pour lequel il n’existe ni formation, ni école. C’est un métier que l’on doit apprendre sur le tas et qui demande donc une remise en question permanente : sur les projets, sur l’équipe, sur l’entreprise mais sur soi avant tout.</p>

<p>À titre personnel j’ai éprouvé trois grandes difficultés :</p>

<ul>
  <li><strong>Le manque de légitimité</strong></li>
</ul>

<p>Pourquoi moi ? Parce que j’étais le plus “ancien” à ce moment-là ? J’ai longtemps pensé qu’être à la tête d’une équipe technique impliquait nécessairement d’être la personne la plus compétente dans ce domaine.</p>

<p>Même si la connaissance technique est un pré-requis important, “être le meilleur” n’en est pas un, puisque développer n’est pas le coeur de ce métier : on est là pour manager.</p>

<p>Lorsque l’on en prend conscience, tout va mieux !</p>

<ul>
  <li><strong>Le manque de feedbacks</strong></li>
</ul>

<p>Comment savoir si l’on fait bien les choses lorsqu’il n’y a personne pour nous le dire ?</p>

<ul>
  <li><strong>Le sentiment d’improductivité</strong></li>
</ul>

<p>En tant que développeur on se sent facilement productif lorsque l’on ajoute/enlève du code. En tant que CTO, on anticipe, on organise, on fluidifie mais nous ne sommes pas dans le “concret”. Peut-on en déduire que notre boulot est bien fait tant qu’on a pas de problème majeur ?</p>

<p>Cette conception du métier de CTO est très personnelle, elle est le fruit de mes réflexions après un an passé à la tête de l’équipe technique de <a href="https://lepermislibre.fr" target="_blank">lePERMISLIBRE</a>. Je n’ai pas la prétention de penser qu’elle est universelle ou simplement valable.</p>

<p>Je suis persuadé que mon métier est différent de celui exercé par le CTO de Doctolib, qui a lui aussi un métier différent du CTO de Google (voici un article à ce sujet que j’ai apprécié : <a href="https://calbucci.com/the-5-stages-of-cto-career-chasm-9d7c04e2ae66" target="_blank">https://calbucci.com/the-5-stages-of-cto-career-chasm-9d7c04e2ae66</a>).</p>

<p>Chaque entreprise, chaque équipe est unique et ce métier doit s’adapter aux conditions dans lesquelles il s’exerce. Je souhaitais simplement apporter mon retour sur expérience à ceux qui seraient “promus” et deviendraient à nouveau débutant dans un métier qu’ils pensaient connaitre.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Il y a un an, suite au départ de notre CTO, la proposition d’assumer ce rôle m’a été faite. Cela faisait déjà 3 ans que je travaillais pour lePERMISLIBRE en tant qu’ingénieur backend principal.]]></summary></entry></feed>